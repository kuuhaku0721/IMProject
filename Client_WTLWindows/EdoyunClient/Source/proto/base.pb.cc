// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tms {

namespace {

const ::google::protobuf::Descriptor* UserBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Targets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Targets_reflection_ = NULL;
const ::google::protobuf::Descriptor* UTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UTarget_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2eproto() {
  protobuf_AddDesc_base_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base.proto");
  GOOGLE_CHECK(file != NULL);
  UserBaseInfo_descriptor_ = file->message_type(0);
  static const int UserBaseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, nface_),
  };
  UserBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBaseInfo_descriptor_,
      UserBaseInfo::default_instance_,
      UserBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBaseInfo));
  TargetInfo_descriptor_ = file->message_type(1);
  static const int TargetInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfo, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfo, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfo, nface_),
  };
  TargetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetInfo_descriptor_,
      TargetInfo::default_instance_,
      TargetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetInfo));
  Targets_descriptor_ = file->message_type(2);
  static const int Targets_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Targets, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Targets, targetinfos_),
  };
  Targets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Targets_descriptor_,
      Targets::default_instance_,
      Targets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Targets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Targets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Targets));
  UTarget_descriptor_ = file->message_type(3);
  static const int UTarget_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTarget, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTarget, uright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTarget, selfparam_),
  };
  UTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UTarget_descriptor_,
      UTarget::default_instance_,
      UTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UTarget));
  TargetType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBaseInfo_descriptor_, &UserBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetInfo_descriptor_, &TargetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Targets_descriptor_, &Targets::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UTarget_descriptor_, &UTarget::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2eproto() {
  delete UserBaseInfo::default_instance_;
  delete UserBaseInfo_reflection_;
  delete TargetInfo::default_instance_;
  delete TargetInfo_reflection_;
  delete Targets::default_instance_;
  delete Targets_reflection_;
  delete UTarget::default_instance_;
  delete UTarget_reflection_;
}

void protobuf_AddDesc_base_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbase.proto\022\003tms\"K\n\014UserBaseInfo\022\024\n\014str"
    "AccountNo\030\001 \002(\t\022\023\n\013strNickName\030\002 \002(\t\022\020\n\005"
    "nFace\030\003 \002(\r:\0010\"I\n\nTargetInfo\022\024\n\014strAccou"
    "ntNo\030\001 \002(\t\022\023\n\013strNickName\030\002 \002(\t\022\020\n\005nFace"
    "\030\003 \002(\r:\0010\"E\n\007Targets\022\024\n\tuTargetID\030\001 \002(\r:"
    "\0010\022$\n\013TargetInfos\030\002 \002(\0132\017.tms.TargetInfo"
    "\"E\n\007UTarget\022\024\n\tuTargetID\030\001 \002(\r:\0010\022\021\n\006uRi"
    "ght\030\002 \002(\r:\0010\022\021\n\tselfparam\030\003 \001(\014*7\n\nTarge"
    "tType\022\023\n\017TargetType_User\020\000\022\024\n\020TargetType"
    "_Group\020\001", 368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base.proto", &protobuf_RegisterTypes);
  UserBaseInfo::default_instance_ = new UserBaseInfo();
  TargetInfo::default_instance_ = new TargetInfo();
  Targets::default_instance_ = new Targets();
  UTarget::default_instance_ = new UTarget();
  UserBaseInfo::default_instance_->InitAsDefaultInstance();
  TargetInfo::default_instance_->InitAsDefaultInstance();
  Targets::default_instance_->InitAsDefaultInstance();
  UTarget::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2eproto {
  StaticDescriptorInitializer_base_2eproto() {
    protobuf_AddDesc_base_2eproto();
  }
} static_descriptor_initializer_base_2eproto_;
const ::google::protobuf::EnumDescriptor* TargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetType_descriptor_;
}
bool TargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserBaseInfo::kStrAccountNoFieldNumber;
const int UserBaseInfo::kStrNickNameFieldNumber;
const int UserBaseInfo::kNFaceFieldNumber;
#endif  // !_MSC_VER

UserBaseInfo::UserBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserBaseInfo::InitAsDefaultInstance() {
}

UserBaseInfo::UserBaseInfo(const UserBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nface_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBaseInfo::~UserBaseInfo() {
  SharedDtor();
}

void UserBaseInfo::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void UserBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBaseInfo_descriptor_;
}

const UserBaseInfo& UserBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

UserBaseInfo* UserBaseInfo::default_instance_ = NULL;

UserBaseInfo* UserBaseInfo::New() const {
  return new UserBaseInfo;
}

void UserBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    nface_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strAccountNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strNickName;
        break;
      }

      // required string strNickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nFace;
        break;
      }

      // required uint32 nFace = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nface_)));
          set_has_nface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccountno(), output);
  }

  // required string strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strnickname(), output);
  }

  // required uint32 nFace = 3 [default = 0];
  if (has_nface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nface(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccountno(), target);
  }

  // required string strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strnickname(), target);
  }

  // required uint32 nFace = 3 [default = 0];
  if (has_nface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nface(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strAccountNo = 1;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // required string strNickName = 2;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

    // required uint32 nFace = 3 [default = 0];
    if (has_nface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nface());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBaseInfo::MergeFrom(const UserBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_nface()) {
      set_nface(from.nface());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBaseInfo::CopyFrom(const UserBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserBaseInfo::Swap(UserBaseInfo* other) {
  if (other != this) {
    std::swap(straccountno_, other->straccountno_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(nface_, other->nface_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBaseInfo_descriptor_;
  metadata.reflection = UserBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetInfo::kStrAccountNoFieldNumber;
const int TargetInfo::kStrNickNameFieldNumber;
const int TargetInfo::kNFaceFieldNumber;
#endif  // !_MSC_VER

TargetInfo::TargetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetInfo::InitAsDefaultInstance() {
}

TargetInfo::TargetInfo(const TargetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetInfo::SharedCtor() {
  _cached_size_ = 0;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nface_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetInfo::~TargetInfo() {
  SharedDtor();
}

void TargetInfo::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void TargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetInfo_descriptor_;
}

const TargetInfo& TargetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

TargetInfo* TargetInfo::default_instance_ = NULL;

TargetInfo* TargetInfo::New() const {
  return new TargetInfo;
}

void TargetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    nface_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strAccountNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strNickName;
        break;
      }

      // required string strNickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nFace;
        break;
      }

      // required uint32 nFace = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nface_)));
          set_has_nface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccountno(), output);
  }

  // required string strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strnickname(), output);
  }

  // required uint32 nFace = 3 [default = 0];
  if (has_nface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nface(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccountno(), target);
  }

  // required string strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strnickname(), target);
  }

  // required uint32 nFace = 3 [default = 0];
  if (has_nface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nface(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strAccountNo = 1;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // required string strNickName = 2;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

    // required uint32 nFace = 3 [default = 0];
    if (has_nface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nface());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetInfo::MergeFrom(const TargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_nface()) {
      set_nface(from.nface());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetInfo::CopyFrom(const TargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TargetInfo::Swap(TargetInfo* other) {
  if (other != this) {
    std::swap(straccountno_, other->straccountno_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(nface_, other->nface_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetInfo_descriptor_;
  metadata.reflection = TargetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Targets::kUTargetIDFieldNumber;
const int Targets::kTargetInfosFieldNumber;
#endif  // !_MSC_VER

Targets::Targets()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Targets::InitAsDefaultInstance() {
  targetinfos_ = const_cast< ::tms::TargetInfo*>(&::tms::TargetInfo::default_instance());
}

Targets::Targets(const Targets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Targets::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  targetinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Targets::~Targets() {
  SharedDtor();
}

void Targets::SharedDtor() {
  if (this != default_instance_) {
    delete targetinfos_;
  }
}

void Targets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Targets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Targets_descriptor_;
}

const Targets& Targets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

Targets* Targets::default_instance_ = NULL;

Targets* Targets::New() const {
  return new Targets;
}

void Targets::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    if (has_targetinfos()) {
      if (targetinfos_ != NULL) targetinfos_->::tms::TargetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Targets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TargetInfos;
        break;
      }

      // required .tms.TargetInfo TargetInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Targets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required .tms.TargetInfo TargetInfos = 2;
  if (has_targetinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Targets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required .tms.TargetInfo TargetInfos = 2;
  if (has_targetinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Targets::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required .tms.TargetInfo TargetInfos = 2;
    if (has_targetinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Targets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Targets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Targets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Targets::MergeFrom(const Targets& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_targetinfos()) {
      mutable_targetinfos()->::tms::TargetInfo::MergeFrom(from.targetinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Targets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Targets::CopyFrom(const Targets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Targets::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_targetinfos()) {
    if (!this->targetinfos().IsInitialized()) return false;
  }
  return true;
}

void Targets::Swap(Targets* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(targetinfos_, other->targetinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Targets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Targets_descriptor_;
  metadata.reflection = Targets_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UTarget::kUTargetIDFieldNumber;
const int UTarget::kURightFieldNumber;
const int UTarget::kSelfparamFieldNumber;
#endif  // !_MSC_VER

UTarget::UTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UTarget::InitAsDefaultInstance() {
}

UTarget::UTarget(const UTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UTarget::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  uright_ = 0u;
  selfparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UTarget::~UTarget() {
  SharedDtor();
}

void UTarget::SharedDtor() {
  if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
    delete selfparam_;
  }
  if (this != default_instance_) {
  }
}

void UTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UTarget_descriptor_;
}

const UTarget& UTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

UTarget* UTarget::default_instance_ = NULL;

UTarget* UTarget::New() const {
  return new UTarget;
}

void UTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    uright_ = 0u;
    if (has_selfparam()) {
      if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
        selfparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uRight;
        break;
      }

      // required uint32 uRight = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uright_)));
          set_has_uright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selfparam;
        break;
      }

      // optional bytes selfparam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selfparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required uint32 uRight = 2 [default = 0];
  if (has_uright()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uright(), output);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->selfparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required uint32 uRight = 2 [default = 0];
  if (has_uright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uright(), target);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->selfparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uRight = 2 [default = 0];
    if (has_uright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uright());
    }

    // optional bytes selfparam = 3;
    if (has_selfparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selfparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UTarget::MergeFrom(const UTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_uright()) {
      set_uright(from.uright());
    }
    if (from.has_selfparam()) {
      set_selfparam(from.selfparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UTarget::CopyFrom(const UTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UTarget::Swap(UTarget* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(uright_, other->uright_);
    std::swap(selfparam_, other->selfparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UTarget_descriptor_;
  metadata.reflection = UTarget_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tms

// @@protoc_insertion_point(global_scope)
