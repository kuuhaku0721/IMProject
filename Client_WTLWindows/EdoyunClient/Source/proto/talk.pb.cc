// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: talk.proto
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "talk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tms {

namespace {

const ::google::protobuf::Descriptor* TalkMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkMsgAns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkMsgAns_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullTalkMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullTalkMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgInfoNotify_MsgInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgInfoNotify_MsgInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkMsgBaseList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkMsgBaseList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkMsgBaseList_TalkMsgBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkMsgBaseList_TalkMsgBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMsgBaseList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMsgBaseList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMsgBaseList_ChatMsgBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMsgBaseList_ChatMsgBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMsgIDList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMsgIDList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMsgIDList_UserMsgID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMsgIDList_UserMsgID_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_talk_2eproto() {
  protobuf_AddDesc_talk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "talk.proto");
  GOOGLE_CHECK(file != NULL);
  TalkMsg_descriptor_ = file->message_type(0);
  static const int TalkMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, usendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, umsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, msg_),
  };
  TalkMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkMsg_descriptor_,
      TalkMsg::default_instance_,
      TalkMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkMsg));
  TalkMsgAns_descriptor_ = file->message_type(1);
  static const int TalkMsgAns_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgAns, uerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgAns, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgAns, umsgid_),
  };
  TalkMsgAns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkMsgAns_descriptor_,
      TalkMsgAns::default_instance_,
      TalkMsgAns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgAns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgAns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkMsgAns));
  PullTalkMsgReq_descriptor_ = file->message_type(2);
  static const int PullTalkMsgReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullTalkMsgReq, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullTalkMsgReq, umsgid_),
  };
  PullTalkMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PullTalkMsgReq_descriptor_,
      PullTalkMsgReq::default_instance_,
      PullTalkMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullTalkMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullTalkMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PullTalkMsgReq));
  MsgInfoNotify_descriptor_ = file->message_type(3);
  static const int MsgInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify, msginfos_),
  };
  MsgInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgInfoNotify_descriptor_,
      MsgInfoNotify::default_instance_,
      MsgInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgInfoNotify));
  MsgInfoNotify_MsgInfo_descriptor_ = MsgInfoNotify_descriptor_->nested_type(0);
  static const int MsgInfoNotify_MsgInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify_MsgInfo, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify_MsgInfo, umsgid_),
  };
  MsgInfoNotify_MsgInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgInfoNotify_MsgInfo_descriptor_,
      MsgInfoNotify_MsgInfo::default_instance_,
      MsgInfoNotify_MsgInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify_MsgInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInfoNotify_MsgInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgInfoNotify_MsgInfo));
  TalkMsgBaseList_descriptor_ = file->message_type(4);
  static const int TalkMsgBaseList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList, talkmsgbases_),
  };
  TalkMsgBaseList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkMsgBaseList_descriptor_,
      TalkMsgBaseList::default_instance_,
      TalkMsgBaseList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkMsgBaseList));
  TalkMsgBaseList_TalkMsgBase_descriptor_ = TalkMsgBaseList_descriptor_->nested_type(0);
  static const int TalkMsgBaseList_TalkMsgBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList_TalkMsgBase, utalkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList_TalkMsgBase, umsgid_),
  };
  TalkMsgBaseList_TalkMsgBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkMsgBaseList_TalkMsgBase_descriptor_,
      TalkMsgBaseList_TalkMsgBase::default_instance_,
      TalkMsgBaseList_TalkMsgBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList_TalkMsgBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkMsgBaseList_TalkMsgBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkMsgBaseList_TalkMsgBase));
  ChatMsgBaseList_descriptor_ = file->message_type(5);
  static const int ChatMsgBaseList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList, chatmsgbases_),
  };
  ChatMsgBaseList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMsgBaseList_descriptor_,
      ChatMsgBaseList::default_instance_,
      ChatMsgBaseList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMsgBaseList));
  ChatMsgBaseList_ChatMsgBase_descriptor_ = ChatMsgBaseList_descriptor_->nested_type(0);
  static const int ChatMsgBaseList_ChatMsgBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList_ChatMsgBase, uchatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList_ChatMsgBase, umsgid_),
  };
  ChatMsgBaseList_ChatMsgBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMsgBaseList_ChatMsgBase_descriptor_,
      ChatMsgBaseList_ChatMsgBase::default_instance_,
      ChatMsgBaseList_ChatMsgBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList_ChatMsgBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBaseList_ChatMsgBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMsgBaseList_ChatMsgBase));
  UserMsgIDList_descriptor_ = file->message_type(6);
  static const int UserMsgIDList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList, usermsgids_),
  };
  UserMsgIDList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMsgIDList_descriptor_,
      UserMsgIDList::default_instance_,
      UserMsgIDList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMsgIDList));
  UserMsgIDList_UserMsgID_descriptor_ = UserMsgIDList_descriptor_->nested_type(0);
  static const int UserMsgIDList_UserMsgID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList_UserMsgID, usendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList_UserMsgID, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList_UserMsgID, umsgid_),
  };
  UserMsgIDList_UserMsgID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMsgIDList_UserMsgID_descriptor_,
      UserMsgIDList_UserMsgID::default_instance_,
      UserMsgIDList_UserMsgID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList_UserMsgID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMsgIDList_UserMsgID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMsgIDList_UserMsgID));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_talk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkMsg_descriptor_, &TalkMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkMsgAns_descriptor_, &TalkMsgAns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PullTalkMsgReq_descriptor_, &PullTalkMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgInfoNotify_descriptor_, &MsgInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgInfoNotify_MsgInfo_descriptor_, &MsgInfoNotify_MsgInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkMsgBaseList_descriptor_, &TalkMsgBaseList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkMsgBaseList_TalkMsgBase_descriptor_, &TalkMsgBaseList_TalkMsgBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMsgBaseList_descriptor_, &ChatMsgBaseList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMsgBaseList_ChatMsgBase_descriptor_, &ChatMsgBaseList_ChatMsgBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMsgIDList_descriptor_, &UserMsgIDList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMsgIDList_UserMsgID_descriptor_, &UserMsgIDList_UserMsgID::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_talk_2eproto() {
  delete TalkMsg::default_instance_;
  delete TalkMsg_reflection_;
  delete TalkMsgAns::default_instance_;
  delete TalkMsgAns_reflection_;
  delete PullTalkMsgReq::default_instance_;
  delete PullTalkMsgReq_reflection_;
  delete MsgInfoNotify::default_instance_;
  delete MsgInfoNotify_reflection_;
  delete MsgInfoNotify_MsgInfo::default_instance_;
  delete MsgInfoNotify_MsgInfo_reflection_;
  delete TalkMsgBaseList::default_instance_;
  delete TalkMsgBaseList_reflection_;
  delete TalkMsgBaseList_TalkMsgBase::default_instance_;
  delete TalkMsgBaseList_TalkMsgBase_reflection_;
  delete ChatMsgBaseList::default_instance_;
  delete ChatMsgBaseList_reflection_;
  delete ChatMsgBaseList_ChatMsgBase::default_instance_;
  delete ChatMsgBaseList_ChatMsgBase_reflection_;
  delete UserMsgIDList::default_instance_;
  delete UserMsgIDList_reflection_;
  delete UserMsgIDList_UserMsgID::default_instance_;
  delete UserMsgIDList_UserMsgID_reflection_;
}

void protobuf_AddDesc_talk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tms::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntalk.proto\022\003tms\032\nbase.proto\"S\n\007TalkMsg"
    "\022\022\n\007uSendID\030\001 \002(\r:\0010\022\024\n\tuTargetID\030\002 \002(\r:"
    "\0010\022\021\n\006uMsgID\030\003 \001(\r:\0010\022\013\n\003msg\030\004 \002(\t\"H\n\nTa"
    "lkMsgAns\022\021\n\006uError\030\001 \002(\r:\0010\022\024\n\tuTargetID"
    "\030\002 \002(\r:\0010\022\021\n\006uMsgID\030\003 \002(\r:\0010\"9\n\016PullTalk"
    "MsgReq\022\024\n\tuTargetID\030\001 \002(\r:\0010\022\021\n\006uMsgID\030\002"
    " \002(\r:\0010\"q\n\rMsgInfoNotify\022,\n\010MsgInfos\030\001 \003"
    "(\0132\032.tms.MsgInfoNotify.MsgInfo\0322\n\007MsgInf"
    "o\022\024\n\tuTargetID\030\001 \002(\r:\0010\022\021\n\006uMsgID\030\002 \002(\r:"
    "\0010\"\177\n\017TalkMsgBaseList\0226\n\014TalkMsgBases\030\001 "
    "\003(\0132 .tms.TalkMsgBaseList.TalkMsgBase\0324\n"
    "\013TalkMsgBase\022\022\n\007uTalkID\030\001 \002(\004:\0010\022\021\n\006uMsg"
    "ID\030\002 \002(\r:\0010\"\177\n\017ChatMsgBaseList\0226\n\014ChatMs"
    "gBases\030\001 \003(\0132 .tms.ChatMsgBaseList.ChatM"
    "sgBase\0324\n\013ChatMsgBase\022\022\n\007uChatID\030\001 \002(\r:\001"
    "0\022\021\n\006uMsgID\030\002 \002(\r:\0010\"\213\001\n\rUserMsgIDList\0220"
    "\n\nUserMsgIDs\030\001 \003(\0132\034.tms.UserMsgIDList.U"
    "serMsgID\032H\n\tUserMsgID\022\022\n\007uSendID\030\001 \002(\r:\001"
    "0\022\024\n\tuTargetID\030\002 \002(\r:\0010\022\021\n\006uMsgID\030\003 \002(\r:"
    "\0010", 762);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "talk.proto", &protobuf_RegisterTypes);
  TalkMsg::default_instance_ = new TalkMsg();
  TalkMsgAns::default_instance_ = new TalkMsgAns();
  PullTalkMsgReq::default_instance_ = new PullTalkMsgReq();
  MsgInfoNotify::default_instance_ = new MsgInfoNotify();
  MsgInfoNotify_MsgInfo::default_instance_ = new MsgInfoNotify_MsgInfo();
  TalkMsgBaseList::default_instance_ = new TalkMsgBaseList();
  TalkMsgBaseList_TalkMsgBase::default_instance_ = new TalkMsgBaseList_TalkMsgBase();
  ChatMsgBaseList::default_instance_ = new ChatMsgBaseList();
  ChatMsgBaseList_ChatMsgBase::default_instance_ = new ChatMsgBaseList_ChatMsgBase();
  UserMsgIDList::default_instance_ = new UserMsgIDList();
  UserMsgIDList_UserMsgID::default_instance_ = new UserMsgIDList_UserMsgID();
  TalkMsg::default_instance_->InitAsDefaultInstance();
  TalkMsgAns::default_instance_->InitAsDefaultInstance();
  PullTalkMsgReq::default_instance_->InitAsDefaultInstance();
  MsgInfoNotify::default_instance_->InitAsDefaultInstance();
  MsgInfoNotify_MsgInfo::default_instance_->InitAsDefaultInstance();
  TalkMsgBaseList::default_instance_->InitAsDefaultInstance();
  TalkMsgBaseList_TalkMsgBase::default_instance_->InitAsDefaultInstance();
  ChatMsgBaseList::default_instance_->InitAsDefaultInstance();
  ChatMsgBaseList_ChatMsgBase::default_instance_->InitAsDefaultInstance();
  UserMsgIDList::default_instance_->InitAsDefaultInstance();
  UserMsgIDList_UserMsgID::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_talk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_talk_2eproto {
  StaticDescriptorInitializer_talk_2eproto() {
    protobuf_AddDesc_talk_2eproto();
  }
} static_descriptor_initializer_talk_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TalkMsg::kUSendIDFieldNumber;
const int TalkMsg::kUTargetIDFieldNumber;
const int TalkMsg::kUMsgIDFieldNumber;
const int TalkMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

TalkMsg::TalkMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkMsg::InitAsDefaultInstance() {
}

TalkMsg::TalkMsg(const TalkMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkMsg::SharedCtor() {
  _cached_size_ = 0;
  usendid_ = 0u;
  utargetid_ = 0u;
  umsgid_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkMsg::~TalkMsg() {
  SharedDtor();
}

void TalkMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void TalkMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkMsg_descriptor_;
}

const TalkMsg& TalkMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talk_2eproto();
  return *default_instance_;
}

TalkMsg* TalkMsg::default_instance_ = NULL;

TalkMsg* TalkMsg::New() const {
  return new TalkMsg;
}

void TalkMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usendid_ = 0u;
    utargetid_ = 0u;
    umsgid_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uSendID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usendid_)));
          set_has_usendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uMsgID;
        break;
      }

      // optional uint32 uMsgID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // required string msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uSendID = 1 [default = 0];
  if (has_usendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usendid(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // optional uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->umsgid(), output);
  }

  // required string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uSendID = 1 [default = 0];
  if (has_usendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usendid(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // optional uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->umsgid(), target);
  }

  // required string msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uSendID = 1 [default = 0];
    if (has_usendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usendid());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // optional uint32 uMsgID = 3 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

    // required string msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkMsg::MergeFrom(const TalkMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usendid()) {
      set_usendid(from.usendid());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkMsg::CopyFrom(const TalkMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void TalkMsg::Swap(TalkMsg* other) {
  if (other != this) {
    std::swap(usendid_, other->usendid_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkMsg_descriptor_;
  metadata.reflection = TalkMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkMsgAns::kUErrorFieldNumber;
const int TalkMsgAns::kUTargetIDFieldNumber;
const int TalkMsgAns::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

TalkMsgAns::TalkMsgAns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkMsgAns::InitAsDefaultInstance() {
}

TalkMsgAns::TalkMsgAns(const TalkMsgAns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkMsgAns::SharedCtor() {
  _cached_size_ = 0;
  uerror_ = 0u;
  utargetid_ = 0u;
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkMsgAns::~TalkMsgAns() {
  SharedDtor();
}

void TalkMsgAns::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalkMsgAns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkMsgAns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkMsgAns_descriptor_;
}

const TalkMsgAns& TalkMsgAns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talk_2eproto();
  return *default_instance_;
}

TalkMsgAns* TalkMsgAns::default_instance_ = NULL;

TalkMsgAns* TalkMsgAns::New() const {
  return new TalkMsgAns;
}

void TalkMsgAns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uerror_ = 0u;
    utargetid_ = 0u;
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkMsgAns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uError = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uerror_)));
          set_has_uerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkMsgAns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uError = 1 [default = 0];
  if (has_uerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uerror(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // required uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkMsgAns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uError = 1 [default = 0];
  if (has_uerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uerror(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // required uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkMsgAns::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uError = 1 [default = 0];
    if (has_uerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uerror());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uMsgID = 3 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkMsgAns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkMsgAns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkMsgAns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkMsgAns::MergeFrom(const TalkMsgAns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uerror()) {
      set_uerror(from.uerror());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkMsgAns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkMsgAns::CopyFrom(const TalkMsgAns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkMsgAns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TalkMsgAns::Swap(TalkMsgAns* other) {
  if (other != this) {
    std::swap(uerror_, other->uerror_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkMsgAns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkMsgAns_descriptor_;
  metadata.reflection = TalkMsgAns_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PullTalkMsgReq::kUTargetIDFieldNumber;
const int PullTalkMsgReq::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

PullTalkMsgReq::PullTalkMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PullTalkMsgReq::InitAsDefaultInstance() {
}

PullTalkMsgReq::PullTalkMsgReq(const PullTalkMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PullTalkMsgReq::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PullTalkMsgReq::~PullTalkMsgReq() {
  SharedDtor();
}

void PullTalkMsgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PullTalkMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullTalkMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullTalkMsgReq_descriptor_;
}

const PullTalkMsgReq& PullTalkMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talk_2eproto();
  return *default_instance_;
}

PullTalkMsgReq* PullTalkMsgReq::default_instance_ = NULL;

PullTalkMsgReq* PullTalkMsgReq::New() const {
  return new PullTalkMsgReq;
}

void PullTalkMsgReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PullTalkMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PullTalkMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PullTalkMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PullTalkMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uMsgID = 2 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullTalkMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PullTalkMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PullTalkMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PullTalkMsgReq::MergeFrom(const PullTalkMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PullTalkMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullTalkMsgReq::CopyFrom(const PullTalkMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullTalkMsgReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PullTalkMsgReq::Swap(PullTalkMsgReq* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PullTalkMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullTalkMsgReq_descriptor_;
  metadata.reflection = PullTalkMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgInfoNotify_MsgInfo::kUTargetIDFieldNumber;
const int MsgInfoNotify_MsgInfo::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

MsgInfoNotify_MsgInfo::MsgInfoNotify_MsgInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgInfoNotify_MsgInfo::InitAsDefaultInstance() {
}

MsgInfoNotify_MsgInfo::MsgInfoNotify_MsgInfo(const MsgInfoNotify_MsgInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgInfoNotify_MsgInfo::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInfoNotify_MsgInfo::~MsgInfoNotify_MsgInfo() {
  SharedDtor();
}

void MsgInfoNotify_MsgInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgInfoNotify_MsgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgInfoNotify_MsgInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgInfoNotify_MsgInfo_descriptor_;
}

const MsgInfoNotify_MsgInfo& MsgInfoNotify_MsgInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talk_2eproto();
  return *default_instance_;
}

MsgInfoNotify_MsgInfo* MsgInfoNotify_MsgInfo::default_instance_ = NULL;

MsgInfoNotify_MsgInfo* MsgInfoNotify_MsgInfo::New() const {
  return new MsgInfoNotify_MsgInfo;
}

void MsgInfoNotify_MsgInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgInfoNotify_MsgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgInfoNotify_MsgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgInfoNotify_MsgInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgInfoNotify_MsgInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uMsgID = 2 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInfoNotify_MsgInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgInfoNotify_MsgInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgInfoNotify_MsgInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgInfoNotify_MsgInfo::MergeFrom(const MsgInfoNotify_MsgInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgInfoNotify_MsgInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInfoNotify_MsgInfo::CopyFrom(const MsgInfoNotify_MsgInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfoNotify_MsgInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgInfoNotify_MsgInfo::Swap(MsgInfoNotify_MsgInfo* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgInfoNotify_MsgInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgInfoNotify_MsgInfo_descriptor_;
  metadata.reflection = MsgInfoNotify_MsgInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgInfoNotify::kMsgInfosFieldNumber;
#endif  // !_MSC_VER

MsgInfoNotify::MsgInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgInfoNotify::InitAsDefaultInstance() {
}

MsgInfoNotify::MsgInfoNotify(const MsgInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInfoNotify::~MsgInfoNotify() {
  SharedDtor();
}

void MsgInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgInfoNotify_descriptor_;
}

const MsgInfoNotify& MsgInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talk_2eproto();
  return *default_instance_;
}

MsgInfoNotify* MsgInfoNotify::default_instance_ = NULL;

MsgInfoNotify* MsgInfoNotify::New() const {
  return new MsgInfoNotify;
}

void MsgInfoNotify::Clear() {
  msginfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.MsgInfoNotify.MsgInfo MsgInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MsgInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msginfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MsgInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.MsgInfoNotify.MsgInfo MsgInfos = 1;
  for (int i = 0; i < this->msginfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msginfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.MsgInfoNotify.MsgInfo MsgInfos = 1;
  for (int i = 0; i < this->msginfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msginfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgInfoNotify::ByteSize() const {
  int total_size = 0;

  // repeated .tms.MsgInfoNotify.MsgInfo MsgInfos = 1;
  total_size += 1 * this->msginfos_size();
  for (int i = 0; i < this->msginfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msginfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgInfoNotify::MergeFrom(const MsgInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  msginfos_.MergeFrom(from.msginfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInfoNotify::CopyFrom(const MsgInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfoNotify::IsInitialized() const {

  for (int i = 0; i < msginfos_size(); i++) {
    if (!this->msginfos(i).IsInitialized()) return false;
  }
  return true;
}

void MsgInfoNotify::Swap(MsgInfoNotify* other) {
  if (other != this) {
    msginfos_.Swap(&other->msginfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgInfoNotify_descriptor_;
  metadata.reflection = MsgInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkMsgBaseList_TalkMsgBase::kUTalkIDFieldNumber;
const int TalkMsgBaseList_TalkMsgBase::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

TalkMsgBaseList_TalkMsgBase::TalkMsgBaseList_TalkMsgBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkMsgBaseList_TalkMsgBase::InitAsDefaultInstance() {
}

TalkMsgBaseList_TalkMsgBase::TalkMsgBaseList_TalkMsgBase(const TalkMsgBaseList_TalkMsgBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkMsgBaseList_TalkMsgBase::SharedCtor() {
  _cached_size_ = 0;
  utalkid_ = GOOGLE_ULONGLONG(0);
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkMsgBaseList_TalkMsgBase::~TalkMsgBaseList_TalkMsgBase() {
  SharedDtor();
}

void TalkMsgBaseList_TalkMsgBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalkMsgBaseList_TalkMsgBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkMsgBaseList_TalkMsgBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkMsgBaseList_TalkMsgBase_descriptor_;
}

const TalkMsgBaseList_TalkMsgBase& TalkMsgBaseList_TalkMsgBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talk_2eproto();
  return *default_instance_;
}

TalkMsgBaseList_TalkMsgBase* TalkMsgBaseList_TalkMsgBase::default_instance_ = NULL;

TalkMsgBaseList_TalkMsgBase* TalkMsgBaseList_TalkMsgBase::New() const {
  return new TalkMsgBaseList_TalkMsgBase;
}

void TalkMsgBaseList_TalkMsgBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utalkid_ = GOOGLE_ULONGLONG(0);
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkMsgBaseList_TalkMsgBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uTalkID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utalkid_)));
          set_has_utalkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkMsgBaseList_TalkMsgBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uTalkID = 1 [default = 0];
  if (has_utalkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->utalkid(), output);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkMsgBaseList_TalkMsgBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uTalkID = 1 [default = 0];
  if (has_utalkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->utalkid(), target);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkMsgBaseList_TalkMsgBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uTalkID = 1 [default = 0];
    if (has_utalkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utalkid());
    }

    // required uint32 uMsgID = 2 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkMsgBaseList_TalkMsgBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkMsgBaseList_TalkMsgBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkMsgBaseList_TalkMsgBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkMsgBaseList_TalkMsgBase::MergeFrom(const TalkMsgBaseList_TalkMsgBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utalkid()) {
      set_utalkid(from.utalkid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkMsgBaseList_TalkMsgBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkMsgBaseList_TalkMsgBase::CopyFrom(const TalkMsgBaseList_TalkMsgBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkMsgBaseList_TalkMsgBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TalkMsgBaseList_TalkMsgBase::Swap(TalkMsgBaseList_TalkMsgBase* other) {
  if (other != this) {
    std::swap(utalkid_, other->utalkid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkMsgBaseList_TalkMsgBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkMsgBaseList_TalkMsgBase_descriptor_;
  metadata.reflection = TalkMsgBaseList_TalkMsgBase_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TalkMsgBaseList::kTalkMsgBasesFieldNumber;
#endif  // !_MSC_VER

TalkMsgBaseList::TalkMsgBaseList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkMsgBaseList::InitAsDefaultInstance() {
}

TalkMsgBaseList::TalkMsgBaseList(const TalkMsgBaseList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkMsgBaseList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkMsgBaseList::~TalkMsgBaseList() {
  SharedDtor();
}

void TalkMsgBaseList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalkMsgBaseList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkMsgBaseList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkMsgBaseList_descriptor_;
}

const TalkMsgBaseList& TalkMsgBaseList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talk_2eproto();
  return *default_instance_;
}

TalkMsgBaseList* TalkMsgBaseList::default_instance_ = NULL;

TalkMsgBaseList* TalkMsgBaseList::New() const {
  return new TalkMsgBaseList;
}

void TalkMsgBaseList::Clear() {
  talkmsgbases_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkMsgBaseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.TalkMsgBaseList.TalkMsgBase TalkMsgBases = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TalkMsgBases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talkmsgbases()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_TalkMsgBases;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkMsgBaseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.TalkMsgBaseList.TalkMsgBase TalkMsgBases = 1;
  for (int i = 0; i < this->talkmsgbases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->talkmsgbases(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkMsgBaseList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.TalkMsgBaseList.TalkMsgBase TalkMsgBases = 1;
  for (int i = 0; i < this->talkmsgbases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->talkmsgbases(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkMsgBaseList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.TalkMsgBaseList.TalkMsgBase TalkMsgBases = 1;
  total_size += 1 * this->talkmsgbases_size();
  for (int i = 0; i < this->talkmsgbases_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talkmsgbases(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkMsgBaseList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkMsgBaseList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkMsgBaseList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkMsgBaseList::MergeFrom(const TalkMsgBaseList& from) {
  GOOGLE_CHECK_NE(&from, this);
  talkmsgbases_.MergeFrom(from.talkmsgbases_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkMsgBaseList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkMsgBaseList::CopyFrom(const TalkMsgBaseList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkMsgBaseList::IsInitialized() const {

  for (int i = 0; i < talkmsgbases_size(); i++) {
    if (!this->talkmsgbases(i).IsInitialized()) return false;
  }
  return true;
}

void TalkMsgBaseList::Swap(TalkMsgBaseList* other) {
  if (other != this) {
    talkmsgbases_.Swap(&other->talkmsgbases_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkMsgBaseList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkMsgBaseList_descriptor_;
  metadata.reflection = TalkMsgBaseList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMsgBaseList_ChatMsgBase::kUChatIDFieldNumber;
const int ChatMsgBaseList_ChatMsgBase::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

ChatMsgBaseList_ChatMsgBase::ChatMsgBaseList_ChatMsgBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMsgBaseList_ChatMsgBase::InitAsDefaultInstance() {
}

ChatMsgBaseList_ChatMsgBase::ChatMsgBaseList_ChatMsgBase(const ChatMsgBaseList_ChatMsgBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMsgBaseList_ChatMsgBase::SharedCtor() {
  _cached_size_ = 0;
  uchatid_ = 0u;
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMsgBaseList_ChatMsgBase::~ChatMsgBaseList_ChatMsgBase() {
  SharedDtor();
}

void ChatMsgBaseList_ChatMsgBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatMsgBaseList_ChatMsgBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMsgBaseList_ChatMsgBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMsgBaseList_ChatMsgBase_descriptor_;
}

const ChatMsgBaseList_ChatMsgBase& ChatMsgBaseList_ChatMsgBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talk_2eproto();
  return *default_instance_;
}

ChatMsgBaseList_ChatMsgBase* ChatMsgBaseList_ChatMsgBase::default_instance_ = NULL;

ChatMsgBaseList_ChatMsgBase* ChatMsgBaseList_ChatMsgBase::New() const {
  return new ChatMsgBaseList_ChatMsgBase;
}

void ChatMsgBaseList_ChatMsgBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uchatid_ = 0u;
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMsgBaseList_ChatMsgBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uChatID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uchatid_)));
          set_has_uchatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMsgBaseList_ChatMsgBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uChatID = 1 [default = 0];
  if (has_uchatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uchatid(), output);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMsgBaseList_ChatMsgBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uChatID = 1 [default = 0];
  if (has_uchatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uchatid(), target);
  }

  // required uint32 uMsgID = 2 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMsgBaseList_ChatMsgBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uChatID = 1 [default = 0];
    if (has_uchatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uchatid());
    }

    // required uint32 uMsgID = 2 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMsgBaseList_ChatMsgBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMsgBaseList_ChatMsgBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMsgBaseList_ChatMsgBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMsgBaseList_ChatMsgBase::MergeFrom(const ChatMsgBaseList_ChatMsgBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uchatid()) {
      set_uchatid(from.uchatid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMsgBaseList_ChatMsgBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsgBaseList_ChatMsgBase::CopyFrom(const ChatMsgBaseList_ChatMsgBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsgBaseList_ChatMsgBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChatMsgBaseList_ChatMsgBase::Swap(ChatMsgBaseList_ChatMsgBase* other) {
  if (other != this) {
    std::swap(uchatid_, other->uchatid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMsgBaseList_ChatMsgBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMsgBaseList_ChatMsgBase_descriptor_;
  metadata.reflection = ChatMsgBaseList_ChatMsgBase_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChatMsgBaseList::kChatMsgBasesFieldNumber;
#endif  // !_MSC_VER

ChatMsgBaseList::ChatMsgBaseList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMsgBaseList::InitAsDefaultInstance() {
}

ChatMsgBaseList::ChatMsgBaseList(const ChatMsgBaseList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMsgBaseList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMsgBaseList::~ChatMsgBaseList() {
  SharedDtor();
}

void ChatMsgBaseList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatMsgBaseList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMsgBaseList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMsgBaseList_descriptor_;
}

const ChatMsgBaseList& ChatMsgBaseList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talk_2eproto();
  return *default_instance_;
}

ChatMsgBaseList* ChatMsgBaseList::default_instance_ = NULL;

ChatMsgBaseList* ChatMsgBaseList::New() const {
  return new ChatMsgBaseList;
}

void ChatMsgBaseList::Clear() {
  chatmsgbases_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMsgBaseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.ChatMsgBaseList.ChatMsgBase ChatMsgBases = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatMsgBases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatmsgbases()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ChatMsgBases;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMsgBaseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.ChatMsgBaseList.ChatMsgBase ChatMsgBases = 1;
  for (int i = 0; i < this->chatmsgbases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatmsgbases(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMsgBaseList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.ChatMsgBaseList.ChatMsgBase ChatMsgBases = 1;
  for (int i = 0; i < this->chatmsgbases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatmsgbases(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMsgBaseList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.ChatMsgBaseList.ChatMsgBase ChatMsgBases = 1;
  total_size += 1 * this->chatmsgbases_size();
  for (int i = 0; i < this->chatmsgbases_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatmsgbases(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMsgBaseList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMsgBaseList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMsgBaseList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMsgBaseList::MergeFrom(const ChatMsgBaseList& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatmsgbases_.MergeFrom(from.chatmsgbases_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMsgBaseList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsgBaseList::CopyFrom(const ChatMsgBaseList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsgBaseList::IsInitialized() const {

  for (int i = 0; i < chatmsgbases_size(); i++) {
    if (!this->chatmsgbases(i).IsInitialized()) return false;
  }
  return true;
}

void ChatMsgBaseList::Swap(ChatMsgBaseList* other) {
  if (other != this) {
    chatmsgbases_.Swap(&other->chatmsgbases_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMsgBaseList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMsgBaseList_descriptor_;
  metadata.reflection = ChatMsgBaseList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMsgIDList_UserMsgID::kUSendIDFieldNumber;
const int UserMsgIDList_UserMsgID::kUTargetIDFieldNumber;
const int UserMsgIDList_UserMsgID::kUMsgIDFieldNumber;
#endif  // !_MSC_VER

UserMsgIDList_UserMsgID::UserMsgIDList_UserMsgID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMsgIDList_UserMsgID::InitAsDefaultInstance() {
}

UserMsgIDList_UserMsgID::UserMsgIDList_UserMsgID(const UserMsgIDList_UserMsgID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMsgIDList_UserMsgID::SharedCtor() {
  _cached_size_ = 0;
  usendid_ = 0u;
  utargetid_ = 0u;
  umsgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMsgIDList_UserMsgID::~UserMsgIDList_UserMsgID() {
  SharedDtor();
}

void UserMsgIDList_UserMsgID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserMsgIDList_UserMsgID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMsgIDList_UserMsgID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMsgIDList_UserMsgID_descriptor_;
}

const UserMsgIDList_UserMsgID& UserMsgIDList_UserMsgID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talk_2eproto();
  return *default_instance_;
}

UserMsgIDList_UserMsgID* UserMsgIDList_UserMsgID::default_instance_ = NULL;

UserMsgIDList_UserMsgID* UserMsgIDList_UserMsgID::New() const {
  return new UserMsgIDList_UserMsgID;
}

void UserMsgIDList_UserMsgID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usendid_ = 0u;
    utargetid_ = 0u;
    umsgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMsgIDList_UserMsgID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uSendID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usendid_)));
          set_has_usendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uMsgID;
        break;
      }

      // required uint32 uMsgID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uMsgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &umsgid_)));
          set_has_umsgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMsgIDList_UserMsgID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uSendID = 1 [default = 0];
  if (has_usendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usendid(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // required uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->umsgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMsgIDList_UserMsgID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uSendID = 1 [default = 0];
  if (has_usendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usendid(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // required uint32 uMsgID = 3 [default = 0];
  if (has_umsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->umsgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMsgIDList_UserMsgID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uSendID = 1 [default = 0];
    if (has_usendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usendid());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uMsgID = 3 [default = 0];
    if (has_umsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->umsgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMsgIDList_UserMsgID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMsgIDList_UserMsgID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMsgIDList_UserMsgID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMsgIDList_UserMsgID::MergeFrom(const UserMsgIDList_UserMsgID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usendid()) {
      set_usendid(from.usendid());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_umsgid()) {
      set_umsgid(from.umsgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMsgIDList_UserMsgID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMsgIDList_UserMsgID::CopyFrom(const UserMsgIDList_UserMsgID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMsgIDList_UserMsgID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserMsgIDList_UserMsgID::Swap(UserMsgIDList_UserMsgID* other) {
  if (other != this) {
    std::swap(usendid_, other->usendid_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(umsgid_, other->umsgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMsgIDList_UserMsgID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMsgIDList_UserMsgID_descriptor_;
  metadata.reflection = UserMsgIDList_UserMsgID_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserMsgIDList::kUserMsgIDsFieldNumber;
#endif  // !_MSC_VER

UserMsgIDList::UserMsgIDList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMsgIDList::InitAsDefaultInstance() {
}

UserMsgIDList::UserMsgIDList(const UserMsgIDList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMsgIDList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMsgIDList::~UserMsgIDList() {
  SharedDtor();
}

void UserMsgIDList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserMsgIDList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMsgIDList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMsgIDList_descriptor_;
}

const UserMsgIDList& UserMsgIDList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_talk_2eproto();
  return *default_instance_;
}

UserMsgIDList* UserMsgIDList::default_instance_ = NULL;

UserMsgIDList* UserMsgIDList::New() const {
  return new UserMsgIDList;
}

void UserMsgIDList::Clear() {
  usermsgids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMsgIDList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.UserMsgIDList.UserMsgID UserMsgIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserMsgIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usermsgids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserMsgIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMsgIDList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.UserMsgIDList.UserMsgID UserMsgIDs = 1;
  for (int i = 0; i < this->usermsgids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usermsgids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMsgIDList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.UserMsgIDList.UserMsgID UserMsgIDs = 1;
  for (int i = 0; i < this->usermsgids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usermsgids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMsgIDList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.UserMsgIDList.UserMsgID UserMsgIDs = 1;
  total_size += 1 * this->usermsgids_size();
  for (int i = 0; i < this->usermsgids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usermsgids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMsgIDList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMsgIDList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMsgIDList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMsgIDList::MergeFrom(const UserMsgIDList& from) {
  GOOGLE_CHECK_NE(&from, this);
  usermsgids_.MergeFrom(from.usermsgids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMsgIDList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMsgIDList::CopyFrom(const UserMsgIDList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMsgIDList::IsInitialized() const {

  for (int i = 0; i < usermsgids_size(); i++) {
    if (!this->usermsgids(i).IsInitialized()) return false;
  }
  return true;
}

void UserMsgIDList::Swap(UserMsgIDList* other) {
  if (other != this) {
    usermsgids_.Swap(&other->usermsgids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMsgIDList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMsgIDList_descriptor_;
  metadata.reflection = UserMsgIDList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tms

// @@protoc_insertion_point(global_scope)
