// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tms {

namespace {

const ::google::protobuf::Descriptor* UTargetSelfparam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UTargetSelfparam_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserTargets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTargets_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPrivateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPrivateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_Old_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_Old_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserOnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOnlineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserInfoReq_cmd_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TargetsQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetsQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetsAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetsAdd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetsAdd_cmd_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UpdateTargetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTargetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetsAddNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetsAddNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserOnlineNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOnlineNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginFlagList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginFlagList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatUser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OnlineState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_2eproto() {
  protobuf_AddDesc_user_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user.proto");
  GOOGLE_CHECK(file != NULL);
  UTargetSelfparam_descriptor_ = file->message_type(0);
  static const int UTargetSelfparam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetSelfparam, strnickname_),
  };
  UTargetSelfparam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UTargetSelfparam_descriptor_,
      UTargetSelfparam::default_instance_,
      UTargetSelfparam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetSelfparam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UTargetSelfparam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UTargetSelfparam));
  UserTargets_descriptor_ = file->message_type(1);
  static const int UserTargets_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTargets, utargets_),
  };
  UserTargets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserTargets_descriptor_,
      UserTargets::default_instance_,
      UserTargets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTargets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTargets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserTargets));
  UserPrivateInfo_descriptor_ = file->message_type(2);
  static const int UserPrivateInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, ngender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, ubirthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, utmregtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, nclienttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, strsigature_),
  };
  UserPrivateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPrivateInfo_descriptor_,
      UserPrivateInfo::default_instance_,
      UserPrivateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPrivateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPrivateInfo));
  UserInfo_descriptor_ = file->message_type(3);
  static const int UserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, targetinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, privateinfos_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  UserInfo_Old_descriptor_ = file->message_type(4);
  static const int UserInfo_Old_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Old, targetinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Old, privateinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Old, targetsnotifys_),
  };
  UserInfo_Old_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_Old_descriptor_,
      UserInfo_Old::default_instance_,
      UserInfo_Old_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Old, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo_Old, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo_Old));
  UserOnlineInfo_descriptor_ = file->message_type(5);
  static const int UserOnlineInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineInfo, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineInfo, uloginflag_),
  };
  UserOnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOnlineInfo_descriptor_,
      UserOnlineInfo::default_instance_,
      UserOnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOnlineInfo));
  LoginInfo_descriptor_ = file->message_type(6);
  static const int LoginInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, strpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, uloginflags_),
  };
  LoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginInfo_descriptor_,
      LoginInfo::default_instance_,
      LoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginInfo));
  RegisterInfo_descriptor_ = file->message_type(7);
  static const int RegisterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInfo, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInfo, strpasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInfo, strnickname_),
  };
  RegisterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterInfo_descriptor_,
      RegisterInfo::default_instance_,
      RegisterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterInfo));
  UserInfoReq_descriptor_ = file->message_type(8);
  static const int UserInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReq, ncmd_),
  };
  UserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoReq_descriptor_,
      UserInfoReq::default_instance_,
      UserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoReq));
  UserInfoReq_cmd_descriptor_ = UserInfoReq_descriptor_->enum_type(0);
  TargetsQuery_descriptor_ = file->message_type(9);
  static const int TargetsQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsQuery, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsQuery, strnickname_),
  };
  TargetsQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetsQuery_descriptor_,
      TargetsQuery::default_instance_,
      TargetsQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetsQuery));
  UpdateUserInfo_descriptor_ = file->message_type(10);
  static const int UpdateUserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, nface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, privateinfos_),
  };
  UpdateUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserInfo_descriptor_,
      UpdateUserInfo::default_instance_,
      UpdateUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserInfo));
  TargetsAdd_descriptor_ = file->message_type(11);
  static const int TargetsAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAdd, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAdd, ncmd_),
  };
  TargetsAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetsAdd_descriptor_,
      TargetsAdd::default_instance_,
      TargetsAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetsAdd));
  TargetsAdd_cmd_descriptor_ = TargetsAdd_descriptor_->enum_type(0);
  UpdateTargetInfo_descriptor_ = file->message_type(12);
  static const int UpdateTargetInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTargetInfo, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTargetInfo, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTargetInfo, selfparam_),
  };
  UpdateTargetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTargetInfo_descriptor_,
      UpdateTargetInfo::default_instance_,
      UpdateTargetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTargetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTargetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTargetInfo));
  UserInfoNotify_descriptor_ = file->message_type(13);
  static const int UserInfoNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, nface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, privateinfos_),
  };
  UserInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoNotify_descriptor_,
      UserInfoNotify::default_instance_,
      UserInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoNotify));
  TargetsAddNotify_descriptor_ = file->message_type(14);
  static const int TargetsAddNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAddNotify, targetsadds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAddNotify, targetinfos_),
  };
  TargetsAddNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetsAddNotify_descriptor_,
      TargetsAddNotify::default_instance_,
      TargetsAddNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAddNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsAddNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetsAddNotify));
  TargetsNotify_descriptor_ = file->message_type(15);
  static const int TargetsNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsNotify, targetss_),
  };
  TargetsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetsNotify_descriptor_,
      TargetsNotify::default_instance_,
      TargetsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetsNotify));
  UserOnlineNotify_descriptor_ = file->message_type(16);
  static const int UserOnlineNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineNotify, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineNotify, userverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineNotify, uloginflag_),
  };
  UserOnlineNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOnlineNotify_descriptor_,
      UserOnlineNotify::default_instance_,
      UserOnlineNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOnlineNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOnlineNotify));
  UserLoginFlag_descriptor_ = file->message_type(17);
  static const int UserLoginFlag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlag, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlag, uloginflags_),
  };
  UserLoginFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginFlag_descriptor_,
      UserLoginFlag::default_instance_,
      UserLoginFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginFlag));
  UserLoginFlagList_descriptor_ = file->message_type(18);
  static const int UserLoginFlagList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlagList, userloginflags_),
  };
  UserLoginFlagList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginFlagList_descriptor_,
      UserLoginFlagList::default_instance_,
      UserLoginFlagList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlagList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginFlagList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginFlagList));
  ChatUser_descriptor_ = file->message_type(19);
  static const int ChatUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUser, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUser, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUser, uright_),
  };
  ChatUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatUser_descriptor_,
      ChatUser::default_instance_,
      ChatUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatUser));
  OnlineState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UTargetSelfparam_descriptor_, &UTargetSelfparam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserTargets_descriptor_, &UserTargets::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPrivateInfo_descriptor_, &UserPrivateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_Old_descriptor_, &UserInfo_Old::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOnlineInfo_descriptor_, &UserOnlineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginInfo_descriptor_, &LoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterInfo_descriptor_, &RegisterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoReq_descriptor_, &UserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetsQuery_descriptor_, &TargetsQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserInfo_descriptor_, &UpdateUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetsAdd_descriptor_, &TargetsAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTargetInfo_descriptor_, &UpdateTargetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoNotify_descriptor_, &UserInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetsAddNotify_descriptor_, &TargetsAddNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetsNotify_descriptor_, &TargetsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOnlineNotify_descriptor_, &UserOnlineNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginFlag_descriptor_, &UserLoginFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginFlagList_descriptor_, &UserLoginFlagList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatUser_descriptor_, &ChatUser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_2eproto() {
  delete UTargetSelfparam::default_instance_;
  delete UTargetSelfparam_reflection_;
  delete UserTargets::default_instance_;
  delete UserTargets_reflection_;
  delete UserPrivateInfo::default_instance_;
  delete UserPrivateInfo_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete UserInfo_Old::default_instance_;
  delete UserInfo_Old_reflection_;
  delete UserOnlineInfo::default_instance_;
  delete UserOnlineInfo_reflection_;
  delete LoginInfo::default_instance_;
  delete LoginInfo_reflection_;
  delete RegisterInfo::default_instance_;
  delete RegisterInfo_reflection_;
  delete UserInfoReq::default_instance_;
  delete UserInfoReq_reflection_;
  delete TargetsQuery::default_instance_;
  delete TargetsQuery_reflection_;
  delete UpdateUserInfo::default_instance_;
  delete UpdateUserInfo_reflection_;
  delete TargetsAdd::default_instance_;
  delete TargetsAdd_reflection_;
  delete UpdateTargetInfo::default_instance_;
  delete UpdateTargetInfo_reflection_;
  delete UserInfoNotify::default_instance_;
  delete UserInfoNotify_reflection_;
  delete TargetsAddNotify::default_instance_;
  delete TargetsAddNotify_reflection_;
  delete TargetsNotify::default_instance_;
  delete TargetsNotify_reflection_;
  delete UserOnlineNotify::default_instance_;
  delete UserOnlineNotify_reflection_;
  delete UserLoginFlag::default_instance_;
  delete UserLoginFlag_reflection_;
  delete UserLoginFlagList::default_instance_;
  delete UserLoginFlagList_reflection_;
  delete ChatUser::default_instance_;
  delete ChatUser_reflection_;
}

void protobuf_AddDesc_user_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tms::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nuser.proto\022\003tms\032\nbase.proto\"\'\n\020UTarget"
    "Selfparam\022\023\n\013strNickName\030\001 \002(\t\"-\n\013UserTa"
    "rgets\022\036\n\010UTargets\030\001 \003(\0132\014.tms.UTarget\"\177\n"
    "\017UserPrivateInfo\022\022\n\007nGender\030\001 \001(\r:\0010\022\024\n\t"
    "uBirthday\030\002 \001(\r:\0010\022\025\n\nutmRegtime\030\003 \001(\r:\001"
    "0\022\026\n\013nClientType\030\004 \001(\r:\0010\022\023\n\013strSigature"
    "\030\005 \001(\t\"\\\n\010UserInfo\022$\n\013TargetInfos\030\002 \002(\0132"
    "\017.tms.TargetInfo\022*\n\014PrivateInfos\030\003 \001(\0132\024"
    ".tms.UserPrivateInfo\"\214\001\n\014UserInfo_Old\022$\n"
    "\013TargetInfos\030\001 \002(\0132\017.tms.TargetInfo\022*\n\014P"
    "rivateInfos\030\002 \001(\0132\024.tms.UserPrivateInfo\022"
    "*\n\016TargetsNotifys\030\003 \001(\0132\022.tms.TargetsNot"
    "ify\">\n\016UserOnlineInfo\022\025\n\nuAccountID\030\001 \002("
    "\r:\0010\022\025\n\nuLoginFlag\030\002 \002(\r:\0010\"L\n\tLoginInfo"
    "\022\024\n\014strAccountNo\030\001 \002(\t\022\021\n\tstrPasswd\030\002 \002("
    "\t\022\026\n\013uLoginFlags\030\003 \001(\r:\0010\"L\n\014RegisterInf"
    "o\022\024\n\014strAccountNo\030\001 \002(\t\022\021\n\tstrPasswd\030\002 \002"
    "(\t\022\023\n\013strNickName\030\003 \002(\t\"\230\001\n\013UserInfoReq\022"
    ",\n\004ncmd\030\001 \002(\0162\024.tms.UserInfoReq.cmd:\010Use"
    "rInfo\"[\n\003cmd\022\016\n\nPublicInfo\020\000\022\017\n\013UserTarg"
    "ets\020\001\022\023\n\017UserPrivateInfo\020\002\022\014\n\010UserInfo\020\003"
    "\022\020\n\014UserInfo_Old\020\004\"9\n\014TargetsQuery\022\024\n\014st"
    "rAccountNo\030\001 \002(\t\022\023\n\013strNickName\030\002 \002(\t\"c\n"
    "\016UpdateUserInfo\022\023\n\013strNickName\030\001 \001(\t\022\020\n\005"
    "nFace\030\002 \001(\r:\0010\022*\n\014PrivateInfos\030\003 \001(\0132\024.t"
    "ms.UserPrivateInfo\"\276\001\n\nTargetsAdd\022\024\n\tuTa"
    "rgetID\030\001 \002(\r:\0010\022(\n\004ncmd\030\002 \002(\0162\023.tms.Targ"
    "etsAdd.cmd:\005Apply\"p\n\003cmd\022\t\n\005Apply\020\000\022\013\n\007A"
    "pplied\020\001\022\t\n\005Agree\020\002\022\n\n\006Agreed\020\003\022\n\n\006Refus"
    "e\020\004\022\013\n\007Refused\020\005\022\n\n\006Delete\020\006\022\013\n\007Deleted\020"
    "\007\022\010\n\004Fail\020\010\"P\n\020UpdateTargetInfo\022\024\n\tuTarg"
    "etID\030\001 \002(\r:\0010\022\023\n\013strNickName\030\002 \001(\t\022\021\n\tse"
    "lfparam\030\003 \001(\014\"\220\001\n\016UserInfoNotify\022\025\n\nuAcc"
    "ountID\030\001 \002(\r:\0010\022\024\n\014strAccountNo\030\002 \001(\t\022\023\n"
    "\013strNickName\030\003 \001(\t\022\020\n\005nFace\030\004 \001(\r:\0010\022*\n\014"
    "PrivateInfos\030\005 \001(\0132\024.tms.UserPrivateInfo"
    "\"^\n\020TargetsAddNotify\022$\n\013TargetsAdds\030\001 \002("
    "\0132\017.tms.TargetsAdd\022$\n\013TargetInfos\030\003 \002(\0132"
    "\017.tms.TargetInfo\"/\n\rTargetsNotify\022\036\n\010Tar"
    "getss\030\001 \003(\0132\014.tms.Targets\"V\n\020UserOnlineN"
    "otify\022\025\n\nuAccountID\030\001 \002(\r:\0010\022\024\n\tuServerI"
    "D\030\002 \002(\r:\0010\022\025\n\nuLoginFlag\030\003 \002(\r:\0010\">\n\rUse"
    "rLoginFlag\022\025\n\nuAccountID\030\001 \002(\r:\0010\022\026\n\013uLo"
    "ginFlags\030\002 \002(\r:\0010\"\?\n\021UserLoginFlagList\022*"
    "\n\016UserLoginFlags\030\001 \003(\0132\022.tms.UserLoginFl"
    "ag\"J\n\010ChatUser\022\025\n\nuAccountID\030\001 \002(\r:\0010\022\024\n"
    "\tuTargetID\030\002 \002(\r:\0010\022\021\n\006uRight\030\003 \002(\r:\0010*>"
    "\n\013OnlineState\022\027\n\023OnlineState_Offline\020\000\022\026"
    "\n\022OnlineState_Online\020\001", 1942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user.proto", &protobuf_RegisterTypes);
  UTargetSelfparam::default_instance_ = new UTargetSelfparam();
  UserTargets::default_instance_ = new UserTargets();
  UserPrivateInfo::default_instance_ = new UserPrivateInfo();
  UserInfo::default_instance_ = new UserInfo();
  UserInfo_Old::default_instance_ = new UserInfo_Old();
  UserOnlineInfo::default_instance_ = new UserOnlineInfo();
  LoginInfo::default_instance_ = new LoginInfo();
  RegisterInfo::default_instance_ = new RegisterInfo();
  UserInfoReq::default_instance_ = new UserInfoReq();
  TargetsQuery::default_instance_ = new TargetsQuery();
  UpdateUserInfo::default_instance_ = new UpdateUserInfo();
  TargetsAdd::default_instance_ = new TargetsAdd();
  UpdateTargetInfo::default_instance_ = new UpdateTargetInfo();
  UserInfoNotify::default_instance_ = new UserInfoNotify();
  TargetsAddNotify::default_instance_ = new TargetsAddNotify();
  TargetsNotify::default_instance_ = new TargetsNotify();
  UserOnlineNotify::default_instance_ = new UserOnlineNotify();
  UserLoginFlag::default_instance_ = new UserLoginFlag();
  UserLoginFlagList::default_instance_ = new UserLoginFlagList();
  ChatUser::default_instance_ = new ChatUser();
  UTargetSelfparam::default_instance_->InitAsDefaultInstance();
  UserTargets::default_instance_->InitAsDefaultInstance();
  UserPrivateInfo::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  UserInfo_Old::default_instance_->InitAsDefaultInstance();
  UserOnlineInfo::default_instance_->InitAsDefaultInstance();
  LoginInfo::default_instance_->InitAsDefaultInstance();
  RegisterInfo::default_instance_->InitAsDefaultInstance();
  UserInfoReq::default_instance_->InitAsDefaultInstance();
  TargetsQuery::default_instance_->InitAsDefaultInstance();
  UpdateUserInfo::default_instance_->InitAsDefaultInstance();
  TargetsAdd::default_instance_->InitAsDefaultInstance();
  UpdateTargetInfo::default_instance_->InitAsDefaultInstance();
  UserInfoNotify::default_instance_->InitAsDefaultInstance();
  TargetsAddNotify::default_instance_->InitAsDefaultInstance();
  TargetsNotify::default_instance_->InitAsDefaultInstance();
  UserOnlineNotify::default_instance_->InitAsDefaultInstance();
  UserLoginFlag::default_instance_->InitAsDefaultInstance();
  UserLoginFlagList::default_instance_->InitAsDefaultInstance();
  ChatUser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_2eproto {
  StaticDescriptorInitializer_user_2eproto() {
    protobuf_AddDesc_user_2eproto();
  }
} static_descriptor_initializer_user_2eproto_;
const ::google::protobuf::EnumDescriptor* OnlineState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineState_descriptor_;
}
bool OnlineState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UTargetSelfparam::kStrNickNameFieldNumber;
#endif  // !_MSC_VER

UTargetSelfparam::UTargetSelfparam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UTargetSelfparam::InitAsDefaultInstance() {
}

UTargetSelfparam::UTargetSelfparam(const UTargetSelfparam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UTargetSelfparam::SharedCtor() {
  _cached_size_ = 0;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UTargetSelfparam::~UTargetSelfparam() {
  SharedDtor();
}

void UTargetSelfparam::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void UTargetSelfparam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UTargetSelfparam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UTargetSelfparam_descriptor_;
}

const UTargetSelfparam& UTargetSelfparam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UTargetSelfparam* UTargetSelfparam::default_instance_ = NULL;

UTargetSelfparam* UTargetSelfparam::New() const {
  return new UTargetSelfparam;
}

void UTargetSelfparam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UTargetSelfparam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strNickName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UTargetSelfparam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strNickName = 1;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UTargetSelfparam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strNickName = 1;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UTargetSelfparam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strNickName = 1;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UTargetSelfparam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UTargetSelfparam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UTargetSelfparam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UTargetSelfparam::MergeFrom(const UTargetSelfparam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UTargetSelfparam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UTargetSelfparam::CopyFrom(const UTargetSelfparam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTargetSelfparam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UTargetSelfparam::Swap(UTargetSelfparam* other) {
  if (other != this) {
    std::swap(strnickname_, other->strnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UTargetSelfparam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UTargetSelfparam_descriptor_;
  metadata.reflection = UTargetSelfparam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserTargets::kUTargetsFieldNumber;
#endif  // !_MSC_VER

UserTargets::UserTargets()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserTargets::InitAsDefaultInstance() {
}

UserTargets::UserTargets(const UserTargets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserTargets::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTargets::~UserTargets() {
  SharedDtor();
}

void UserTargets::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserTargets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTargets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTargets_descriptor_;
}

const UserTargets& UserTargets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserTargets* UserTargets::default_instance_ = NULL;

UserTargets* UserTargets::New() const {
  return new UserTargets;
}

void UserTargets::Clear() {
  utargets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserTargets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.UTarget UTargets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UTargets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_utargets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UTargets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserTargets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.UTarget UTargets = 1;
  for (int i = 0; i < this->utargets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->utargets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserTargets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.UTarget UTargets = 1;
  for (int i = 0; i < this->utargets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->utargets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserTargets::ByteSize() const {
  int total_size = 0;

  // repeated .tms.UTarget UTargets = 1;
  total_size += 1 * this->utargets_size();
  for (int i = 0; i < this->utargets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->utargets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTargets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserTargets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserTargets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserTargets::MergeFrom(const UserTargets& from) {
  GOOGLE_CHECK_NE(&from, this);
  utargets_.MergeFrom(from.utargets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserTargets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTargets::CopyFrom(const UserTargets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTargets::IsInitialized() const {

  for (int i = 0; i < utargets_size(); i++) {
    if (!this->utargets(i).IsInitialized()) return false;
  }
  return true;
}

void UserTargets::Swap(UserTargets* other) {
  if (other != this) {
    utargets_.Swap(&other->utargets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserTargets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTargets_descriptor_;
  metadata.reflection = UserTargets_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPrivateInfo::kNGenderFieldNumber;
const int UserPrivateInfo::kUBirthdayFieldNumber;
const int UserPrivateInfo::kUtmRegtimeFieldNumber;
const int UserPrivateInfo::kNClientTypeFieldNumber;
const int UserPrivateInfo::kStrSigatureFieldNumber;
#endif  // !_MSC_VER

UserPrivateInfo::UserPrivateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserPrivateInfo::InitAsDefaultInstance() {
}

UserPrivateInfo::UserPrivateInfo(const UserPrivateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserPrivateInfo::SharedCtor() {
  _cached_size_ = 0;
  ngender_ = 0u;
  ubirthday_ = 0u;
  utmregtime_ = 0u;
  nclienttype_ = 0u;
  strsigature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPrivateInfo::~UserPrivateInfo() {
  SharedDtor();
}

void UserPrivateInfo::SharedDtor() {
  if (strsigature_ != &::google::protobuf::internal::kEmptyString) {
    delete strsigature_;
  }
  if (this != default_instance_) {
  }
}

void UserPrivateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPrivateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPrivateInfo_descriptor_;
}

const UserPrivateInfo& UserPrivateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserPrivateInfo* UserPrivateInfo::default_instance_ = NULL;

UserPrivateInfo* UserPrivateInfo::New() const {
  return new UserPrivateInfo;
}

void UserPrivateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ngender_ = 0u;
    ubirthday_ = 0u;
    utmregtime_ = 0u;
    nclienttype_ = 0u;
    if (has_strsigature()) {
      if (strsigature_ != &::google::protobuf::internal::kEmptyString) {
        strsigature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPrivateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nGender = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ngender_)));
          set_has_ngender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uBirthday;
        break;
      }

      // optional uint32 uBirthday = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uBirthday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ubirthday_)));
          set_has_ubirthday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_utmRegtime;
        break;
      }

      // optional uint32 utmRegtime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_utmRegtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utmregtime_)));
          set_has_utmregtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nClientType;
        break;
      }

      // optional uint32 nClientType = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nClientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nclienttype_)));
          set_has_nclienttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strSigature;
        break;
      }

      // optional string strSigature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSigature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsigature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strsigature().data(), this->strsigature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPrivateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nGender = 1 [default = 0];
  if (has_ngender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ngender(), output);
  }

  // optional uint32 uBirthday = 2 [default = 0];
  if (has_ubirthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ubirthday(), output);
  }

  // optional uint32 utmRegtime = 3 [default = 0];
  if (has_utmregtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->utmregtime(), output);
  }

  // optional uint32 nClientType = 4 [default = 0];
  if (has_nclienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nclienttype(), output);
  }

  // optional string strSigature = 5;
  if (has_strsigature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsigature().data(), this->strsigature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strsigature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserPrivateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nGender = 1 [default = 0];
  if (has_ngender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ngender(), target);
  }

  // optional uint32 uBirthday = 2 [default = 0];
  if (has_ubirthday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ubirthday(), target);
  }

  // optional uint32 utmRegtime = 3 [default = 0];
  if (has_utmregtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->utmregtime(), target);
  }

  // optional uint32 nClientType = 4 [default = 0];
  if (has_nclienttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nclienttype(), target);
  }

  // optional string strSigature = 5;
  if (has_strsigature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsigature().data(), this->strsigature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strsigature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserPrivateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nGender = 1 [default = 0];
    if (has_ngender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ngender());
    }

    // optional uint32 uBirthday = 2 [default = 0];
    if (has_ubirthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ubirthday());
    }

    // optional uint32 utmRegtime = 3 [default = 0];
    if (has_utmregtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utmregtime());
    }

    // optional uint32 nClientType = 4 [default = 0];
    if (has_nclienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nclienttype());
    }

    // optional string strSigature = 5;
    if (has_strsigature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsigature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPrivateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPrivateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPrivateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPrivateInfo::MergeFrom(const UserPrivateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ngender()) {
      set_ngender(from.ngender());
    }
    if (from.has_ubirthday()) {
      set_ubirthday(from.ubirthday());
    }
    if (from.has_utmregtime()) {
      set_utmregtime(from.utmregtime());
    }
    if (from.has_nclienttype()) {
      set_nclienttype(from.nclienttype());
    }
    if (from.has_strsigature()) {
      set_strsigature(from.strsigature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPrivateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPrivateInfo::CopyFrom(const UserPrivateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPrivateInfo::IsInitialized() const {

  return true;
}

void UserPrivateInfo::Swap(UserPrivateInfo* other) {
  if (other != this) {
    std::swap(ngender_, other->ngender_);
    std::swap(ubirthday_, other->ubirthday_);
    std::swap(utmregtime_, other->utmregtime_);
    std::swap(nclienttype_, other->nclienttype_);
    std::swap(strsigature_, other->strsigature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPrivateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPrivateInfo_descriptor_;
  metadata.reflection = UserPrivateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kTargetInfosFieldNumber;
const int UserInfo::kPrivateInfosFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
  targetinfos_ = const_cast< ::tms::TargetInfo*>(&::tms::TargetInfo::default_instance());
  privateinfos_ = const_cast< ::tms::UserPrivateInfo*>(&::tms::UserPrivateInfo::default_instance());
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  targetinfos_ = NULL;
  privateinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete targetinfos_;
    delete privateinfos_;
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_targetinfos()) {
      if (targetinfos_ != NULL) targetinfos_->::tms::TargetInfo::Clear();
    }
    if (has_privateinfos()) {
      if (privateinfos_ != NULL) privateinfos_->::tms::UserPrivateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tms.TargetInfo TargetInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PrivateInfos;
        break;
      }

      // optional .tms.UserPrivateInfo PrivateInfos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrivateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privateinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tms.TargetInfo TargetInfos = 2;
  if (has_targetinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetinfos(), output);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 3;
  if (has_privateinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->privateinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tms.TargetInfo TargetInfos = 2;
  if (has_targetinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetinfos(), target);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 3;
  if (has_privateinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->privateinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tms.TargetInfo TargetInfos = 2;
    if (has_targetinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetinfos());
    }

    // optional .tms.UserPrivateInfo PrivateInfos = 3;
    if (has_privateinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privateinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetinfos()) {
      mutable_targetinfos()->::tms::TargetInfo::MergeFrom(from.targetinfos());
    }
    if (from.has_privateinfos()) {
      mutable_privateinfos()->::tms::UserPrivateInfo::MergeFrom(from.privateinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_targetinfos()) {
    if (!this->targetinfos().IsInitialized()) return false;
  }
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(targetinfos_, other->targetinfos_);
    std::swap(privateinfos_, other->privateinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo_Old::kTargetInfosFieldNumber;
const int UserInfo_Old::kPrivateInfosFieldNumber;
const int UserInfo_Old::kTargetsNotifysFieldNumber;
#endif  // !_MSC_VER

UserInfo_Old::UserInfo_Old()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo_Old::InitAsDefaultInstance() {
  targetinfos_ = const_cast< ::tms::TargetInfo*>(&::tms::TargetInfo::default_instance());
  privateinfos_ = const_cast< ::tms::UserPrivateInfo*>(&::tms::UserPrivateInfo::default_instance());
  targetsnotifys_ = const_cast< ::tms::TargetsNotify*>(&::tms::TargetsNotify::default_instance());
}

UserInfo_Old::UserInfo_Old(const UserInfo_Old& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo_Old::SharedCtor() {
  _cached_size_ = 0;
  targetinfos_ = NULL;
  privateinfos_ = NULL;
  targetsnotifys_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo_Old::~UserInfo_Old() {
  SharedDtor();
}

void UserInfo_Old::SharedDtor() {
  if (this != default_instance_) {
    delete targetinfos_;
    delete privateinfos_;
    delete targetsnotifys_;
  }
}

void UserInfo_Old::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo_Old::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_Old_descriptor_;
}

const UserInfo_Old& UserInfo_Old::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserInfo_Old* UserInfo_Old::default_instance_ = NULL;

UserInfo_Old* UserInfo_Old::New() const {
  return new UserInfo_Old;
}

void UserInfo_Old::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_targetinfos()) {
      if (targetinfos_ != NULL) targetinfos_->::tms::TargetInfo::Clear();
    }
    if (has_privateinfos()) {
      if (privateinfos_ != NULL) privateinfos_->::tms::UserPrivateInfo::Clear();
    }
    if (has_targetsnotifys()) {
      if (targetsnotifys_ != NULL) targetsnotifys_->::tms::TargetsNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo_Old::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tms.TargetInfo TargetInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PrivateInfos;
        break;
      }

      // optional .tms.UserPrivateInfo PrivateInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrivateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privateinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TargetsNotifys;
        break;
      }

      // optional .tms.TargetsNotify TargetsNotifys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetsNotifys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetsnotifys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo_Old::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tms.TargetInfo TargetInfos = 1;
  if (has_targetinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targetinfos(), output);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 2;
  if (has_privateinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->privateinfos(), output);
  }

  // optional .tms.TargetsNotify TargetsNotifys = 3;
  if (has_targetsnotifys()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetsnotifys(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo_Old::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tms.TargetInfo TargetInfos = 1;
  if (has_targetinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targetinfos(), target);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 2;
  if (has_privateinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->privateinfos(), target);
  }

  // optional .tms.TargetsNotify TargetsNotifys = 3;
  if (has_targetsnotifys()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetsnotifys(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo_Old::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tms.TargetInfo TargetInfos = 1;
    if (has_targetinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetinfos());
    }

    // optional .tms.UserPrivateInfo PrivateInfos = 2;
    if (has_privateinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privateinfos());
    }

    // optional .tms.TargetsNotify TargetsNotifys = 3;
    if (has_targetsnotifys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetsnotifys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo_Old::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo_Old* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo_Old*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo_Old::MergeFrom(const UserInfo_Old& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetinfos()) {
      mutable_targetinfos()->::tms::TargetInfo::MergeFrom(from.targetinfos());
    }
    if (from.has_privateinfos()) {
      mutable_privateinfos()->::tms::UserPrivateInfo::MergeFrom(from.privateinfos());
    }
    if (from.has_targetsnotifys()) {
      mutable_targetsnotifys()->::tms::TargetsNotify::MergeFrom(from.targetsnotifys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo_Old::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo_Old::CopyFrom(const UserInfo_Old& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo_Old::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_targetinfos()) {
    if (!this->targetinfos().IsInitialized()) return false;
  }
  if (has_targetsnotifys()) {
    if (!this->targetsnotifys().IsInitialized()) return false;
  }
  return true;
}

void UserInfo_Old::Swap(UserInfo_Old* other) {
  if (other != this) {
    std::swap(targetinfos_, other->targetinfos_);
    std::swap(privateinfos_, other->privateinfos_);
    std::swap(targetsnotifys_, other->targetsnotifys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo_Old::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_Old_descriptor_;
  metadata.reflection = UserInfo_Old_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserOnlineInfo::kUAccountIDFieldNumber;
const int UserOnlineInfo::kULoginFlagFieldNumber;
#endif  // !_MSC_VER

UserOnlineInfo::UserOnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserOnlineInfo::InitAsDefaultInstance() {
}

UserOnlineInfo::UserOnlineInfo(const UserOnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserOnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  uloginflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOnlineInfo::~UserOnlineInfo() {
  SharedDtor();
}

void UserOnlineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserOnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOnlineInfo_descriptor_;
}

const UserOnlineInfo& UserOnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserOnlineInfo* UserOnlineInfo::default_instance_ = NULL;

UserOnlineInfo* UserOnlineInfo::New() const {
  return new UserOnlineInfo;
}

void UserOnlineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    uloginflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uLoginFlag;
        break;
      }

      // required uint32 uLoginFlag = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLoginFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uloginflag_)));
          set_has_uloginflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserOnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // required uint32 uLoginFlag = 2 [default = 0];
  if (has_uloginflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uloginflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserOnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // required uint32 uLoginFlag = 2 [default = 0];
  if (has_uloginflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uloginflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserOnlineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1 [default = 0];
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // required uint32 uLoginFlag = 2 [default = 0];
    if (has_uloginflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uloginflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOnlineInfo::MergeFrom(const UserOnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_uloginflag()) {
      set_uloginflag(from.uloginflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOnlineInfo::CopyFrom(const UserOnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOnlineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserOnlineInfo::Swap(UserOnlineInfo* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(uloginflag_, other->uloginflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOnlineInfo_descriptor_;
  metadata.reflection = UserOnlineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginInfo::kStrAccountNoFieldNumber;
const int LoginInfo::kStrPasswdFieldNumber;
const int LoginInfo::kULoginFlagsFieldNumber;
#endif  // !_MSC_VER

LoginInfo::LoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginInfo::InitAsDefaultInstance() {
}

LoginInfo::LoginInfo(const LoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginInfo::SharedCtor() {
  _cached_size_ = 0;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uloginflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginInfo::~LoginInfo() {
  SharedDtor();
}

void LoginInfo::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (strpasswd_ != &::google::protobuf::internal::kEmptyString) {
    delete strpasswd_;
  }
  if (this != default_instance_) {
  }
}

void LoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginInfo_descriptor_;
}

const LoginInfo& LoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

LoginInfo* LoginInfo::default_instance_ = NULL;

LoginInfo* LoginInfo::New() const {
  return new LoginInfo;
}

void LoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    if (has_strpasswd()) {
      if (strpasswd_ != &::google::protobuf::internal::kEmptyString) {
        strpasswd_->clear();
      }
    }
    uloginflags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strAccountNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strPasswd;
        break;
      }

      // required string strPasswd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpasswd().data(), this->strpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uLoginFlags;
        break;
      }

      // optional uint32 uLoginFlags = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLoginFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uloginflags_)));
          set_has_uloginflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccountno(), output);
  }

  // required string strPasswd = 2;
  if (has_strpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strpasswd(), output);
  }

  // optional uint32 uLoginFlags = 3 [default = 0];
  if (has_uloginflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uloginflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccountno(), target);
  }

  // required string strPasswd = 2;
  if (has_strpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strpasswd(), target);
  }

  // optional uint32 uLoginFlags = 3 [default = 0];
  if (has_uloginflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uloginflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strAccountNo = 1;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // required string strPasswd = 2;
    if (has_strpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpasswd());
    }

    // optional uint32 uLoginFlags = 3 [default = 0];
    if (has_uloginflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uloginflags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginInfo::MergeFrom(const LoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_strpasswd()) {
      set_strpasswd(from.strpasswd());
    }
    if (from.has_uloginflags()) {
      set_uloginflags(from.uloginflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginInfo::Swap(LoginInfo* other) {
  if (other != this) {
    std::swap(straccountno_, other->straccountno_);
    std::swap(strpasswd_, other->strpasswd_);
    std::swap(uloginflags_, other->uloginflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginInfo_descriptor_;
  metadata.reflection = LoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterInfo::kStrAccountNoFieldNumber;
const int RegisterInfo::kStrPasswdFieldNumber;
const int RegisterInfo::kStrNickNameFieldNumber;
#endif  // !_MSC_VER

RegisterInfo::RegisterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterInfo::InitAsDefaultInstance() {
}

RegisterInfo::RegisterInfo(const RegisterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterInfo::SharedCtor() {
  _cached_size_ = 0;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterInfo::~RegisterInfo() {
  SharedDtor();
}

void RegisterInfo::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (strpasswd_ != &::google::protobuf::internal::kEmptyString) {
    delete strpasswd_;
  }
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void RegisterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterInfo_descriptor_;
}

const RegisterInfo& RegisterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

RegisterInfo* RegisterInfo::default_instance_ = NULL;

RegisterInfo* RegisterInfo::New() const {
  return new RegisterInfo;
}

void RegisterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    if (has_strpasswd()) {
      if (strpasswd_ != &::google::protobuf::internal::kEmptyString) {
        strpasswd_->clear();
      }
    }
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strAccountNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strPasswd;
        break;
      }

      // required string strPasswd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpasswd().data(), this->strpasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strNickName;
        break;
      }

      // required string strNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccountno(), output);
  }

  // required string strPasswd = 2;
  if (has_strpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strpasswd(), output);
  }

  // required string strNickName = 3;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccountno(), target);
  }

  // required string strPasswd = 2;
  if (has_strpasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpasswd().data(), this->strpasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strpasswd(), target);
  }

  // required string strNickName = 3;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strAccountNo = 1;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // required string strPasswd = 2;
    if (has_strpasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpasswd());
    }

    // required string strNickName = 3;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterInfo::MergeFrom(const RegisterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_strpasswd()) {
      set_strpasswd(from.strpasswd());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterInfo::CopyFrom(const RegisterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RegisterInfo::Swap(RegisterInfo* other) {
  if (other != this) {
    std::swap(straccountno_, other->straccountno_);
    std::swap(strpasswd_, other->strpasswd_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterInfo_descriptor_;
  metadata.reflection = RegisterInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserInfoReq_cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoReq_cmd_descriptor_;
}
bool UserInfoReq_cmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserInfoReq_cmd UserInfoReq::PublicInfo;
const UserInfoReq_cmd UserInfoReq::UserTargets;
const UserInfoReq_cmd UserInfoReq::UserPrivateInfo;
const UserInfoReq_cmd UserInfoReq::UserInfo;
const UserInfoReq_cmd UserInfoReq::UserInfo_Old;
const UserInfoReq_cmd UserInfoReq::cmd_MIN;
const UserInfoReq_cmd UserInfoReq::cmd_MAX;
const int UserInfoReq::cmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserInfoReq::kNcmdFieldNumber;
#endif  // !_MSC_VER

UserInfoReq::UserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfoReq::InitAsDefaultInstance() {
}

UserInfoReq::UserInfoReq(const UserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ncmd_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoReq::~UserInfoReq() {
  SharedDtor();
}

void UserInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoReq_descriptor_;
}

const UserInfoReq& UserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserInfoReq* UserInfoReq::default_instance_ = NULL;

UserInfoReq* UserInfoReq::New() const {
  return new UserInfoReq;
}

void UserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ncmd_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tms.UserInfoReq.cmd ncmd = 1 [default = UserInfo];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tms::UserInfoReq_cmd_IsValid(value)) {
            set_ncmd(static_cast< ::tms::UserInfoReq_cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tms.UserInfoReq.cmd ncmd = 1 [default = UserInfo];
  if (has_ncmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ncmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tms.UserInfoReq.cmd ncmd = 1 [default = UserInfo];
  if (has_ncmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ncmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tms.UserInfoReq.cmd ncmd = 1 [default = UserInfo];
    if (has_ncmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ncmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoReq::MergeFrom(const UserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ncmd()) {
      set_ncmd(from.ncmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoReq::CopyFrom(const UserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserInfoReq::Swap(UserInfoReq* other) {
  if (other != this) {
    std::swap(ncmd_, other->ncmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoReq_descriptor_;
  metadata.reflection = UserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetsQuery::kStrAccountNoFieldNumber;
const int TargetsQuery::kStrNickNameFieldNumber;
#endif  // !_MSC_VER

TargetsQuery::TargetsQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetsQuery::InitAsDefaultInstance() {
}

TargetsQuery::TargetsQuery(const TargetsQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetsQuery::SharedCtor() {
  _cached_size_ = 0;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetsQuery::~TargetsQuery() {
  SharedDtor();
}

void TargetsQuery::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void TargetsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetsQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetsQuery_descriptor_;
}

const TargetsQuery& TargetsQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TargetsQuery* TargetsQuery::default_instance_ = NULL;

TargetsQuery* TargetsQuery::New() const {
  return new TargetsQuery;
}

void TargetsQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strAccountNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strNickName;
        break;
      }

      // required string strNickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccountno(), output);
  }

  // required string strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetsQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strAccountNo = 1;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccountno(), target);
  }

  // required string strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetsQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strAccountNo = 1;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // required string strNickName = 2;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetsQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetsQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetsQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetsQuery::MergeFrom(const TargetsQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetsQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetsQuery::CopyFrom(const TargetsQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetsQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TargetsQuery::Swap(TargetsQuery* other) {
  if (other != this) {
    std::swap(straccountno_, other->straccountno_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetsQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetsQuery_descriptor_;
  metadata.reflection = TargetsQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInfo::kStrNickNameFieldNumber;
const int UpdateUserInfo::kNFaceFieldNumber;
const int UpdateUserInfo::kPrivateInfosFieldNumber;
#endif  // !_MSC_VER

UpdateUserInfo::UpdateUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateUserInfo::InitAsDefaultInstance() {
  privateinfos_ = const_cast< ::tms::UserPrivateInfo*>(&::tms::UserPrivateInfo::default_instance());
}

UpdateUserInfo::UpdateUserInfo(const UpdateUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateUserInfo::SharedCtor() {
  _cached_size_ = 0;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nface_ = 0u;
  privateinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInfo::~UpdateUserInfo() {
  SharedDtor();
}

void UpdateUserInfo::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
    delete privateinfos_;
  }
}

void UpdateUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserInfo_descriptor_;
}

const UpdateUserInfo& UpdateUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UpdateUserInfo* UpdateUserInfo::default_instance_ = NULL;

UpdateUserInfo* UpdateUserInfo::New() const {
  return new UpdateUserInfo;
}

void UpdateUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    nface_ = 0u;
    if (has_privateinfos()) {
      if (privateinfos_ != NULL) privateinfos_->::tms::UserPrivateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strNickName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nFace;
        break;
      }

      // optional uint32 nFace = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nface_)));
          set_has_nface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PrivateInfos;
        break;
      }

      // optional .tms.UserPrivateInfo PrivateInfos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrivateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privateinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strNickName = 1;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strnickname(), output);
  }

  // optional uint32 nFace = 2 [default = 0];
  if (has_nface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nface(), output);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 3;
  if (has_privateinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->privateinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strNickName = 1;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strnickname(), target);
  }

  // optional uint32 nFace = 2 [default = 0];
  if (has_nface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nface(), target);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 3;
  if (has_privateinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->privateinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strNickName = 1;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

    // optional uint32 nFace = 2 [default = 0];
    if (has_nface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nface());
    }

    // optional .tms.UserPrivateInfo PrivateInfos = 3;
    if (has_privateinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privateinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserInfo::MergeFrom(const UpdateUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_nface()) {
      set_nface(from.nface());
    }
    if (from.has_privateinfos()) {
      mutable_privateinfos()->::tms::UserPrivateInfo::MergeFrom(from.privateinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserInfo::CopyFrom(const UpdateUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfo::IsInitialized() const {

  return true;
}

void UpdateUserInfo::Swap(UpdateUserInfo* other) {
  if (other != this) {
    std::swap(strnickname_, other->strnickname_);
    std::swap(nface_, other->nface_);
    std::swap(privateinfos_, other->privateinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserInfo_descriptor_;
  metadata.reflection = UpdateUserInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TargetsAdd_cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetsAdd_cmd_descriptor_;
}
bool TargetsAdd_cmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TargetsAdd_cmd TargetsAdd::Apply;
const TargetsAdd_cmd TargetsAdd::Applied;
const TargetsAdd_cmd TargetsAdd::Agree;
const TargetsAdd_cmd TargetsAdd::Agreed;
const TargetsAdd_cmd TargetsAdd::Refuse;
const TargetsAdd_cmd TargetsAdd::Refused;
const TargetsAdd_cmd TargetsAdd::Delete;
const TargetsAdd_cmd TargetsAdd::Deleted;
const TargetsAdd_cmd TargetsAdd::Fail;
const TargetsAdd_cmd TargetsAdd::cmd_MIN;
const TargetsAdd_cmd TargetsAdd::cmd_MAX;
const int TargetsAdd::cmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TargetsAdd::kUTargetIDFieldNumber;
const int TargetsAdd::kNcmdFieldNumber;
#endif  // !_MSC_VER

TargetsAdd::TargetsAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetsAdd::InitAsDefaultInstance() {
}

TargetsAdd::TargetsAdd(const TargetsAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetsAdd::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  ncmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetsAdd::~TargetsAdd() {
  SharedDtor();
}

void TargetsAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetsAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetsAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetsAdd_descriptor_;
}

const TargetsAdd& TargetsAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TargetsAdd* TargetsAdd::default_instance_ = NULL;

TargetsAdd* TargetsAdd::New() const {
  return new TargetsAdd;
}

void TargetsAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    ncmd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetsAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ncmd;
        break;
      }

      // required .tms.TargetsAdd.cmd ncmd = 2 [default = Apply];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ncmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tms::TargetsAdd_cmd_IsValid(value)) {
            set_ncmd(static_cast< ::tms::TargetsAdd_cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetsAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required .tms.TargetsAdd.cmd ncmd = 2 [default = Apply];
  if (has_ncmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ncmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetsAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required .tms.TargetsAdd.cmd ncmd = 2 [default = Apply];
  if (has_ncmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ncmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetsAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required .tms.TargetsAdd.cmd ncmd = 2 [default = Apply];
    if (has_ncmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ncmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetsAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetsAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetsAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetsAdd::MergeFrom(const TargetsAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_ncmd()) {
      set_ncmd(from.ncmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetsAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetsAdd::CopyFrom(const TargetsAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetsAdd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TargetsAdd::Swap(TargetsAdd* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(ncmd_, other->ncmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetsAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetsAdd_descriptor_;
  metadata.reflection = TargetsAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTargetInfo::kUTargetIDFieldNumber;
const int UpdateTargetInfo::kStrNickNameFieldNumber;
const int UpdateTargetInfo::kSelfparamFieldNumber;
#endif  // !_MSC_VER

UpdateTargetInfo::UpdateTargetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateTargetInfo::InitAsDefaultInstance() {
}

UpdateTargetInfo::UpdateTargetInfo(const UpdateTargetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateTargetInfo::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTargetInfo::~UpdateTargetInfo() {
  SharedDtor();
}

void UpdateTargetInfo::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
    delete selfparam_;
  }
  if (this != default_instance_) {
  }
}

void UpdateTargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTargetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTargetInfo_descriptor_;
}

const UpdateTargetInfo& UpdateTargetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UpdateTargetInfo* UpdateTargetInfo::default_instance_ = NULL;

UpdateTargetInfo* UpdateTargetInfo::New() const {
  return new UpdateTargetInfo;
}

void UpdateTargetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    if (has_selfparam()) {
      if (selfparam_ != &::google::protobuf::internal::kEmptyString) {
        selfparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strNickName;
        break;
      }

      // optional string strNickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selfparam;
        break;
      }

      // optional bytes selfparam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selfparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // optional string strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strnickname(), output);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->selfparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateTargetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // optional string strNickName = 2;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strnickname(), target);
  }

  // optional bytes selfparam = 3;
  if (has_selfparam()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->selfparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateTargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // optional string strNickName = 2;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

    // optional bytes selfparam = 3;
    if (has_selfparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selfparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTargetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTargetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTargetInfo::MergeFrom(const UpdateTargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_selfparam()) {
      set_selfparam(from.selfparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTargetInfo::CopyFrom(const UpdateTargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTargetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateTargetInfo::Swap(UpdateTargetInfo* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(selfparam_, other->selfparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTargetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTargetInfo_descriptor_;
  metadata.reflection = UpdateTargetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoNotify::kUAccountIDFieldNumber;
const int UserInfoNotify::kStrAccountNoFieldNumber;
const int UserInfoNotify::kStrNickNameFieldNumber;
const int UserInfoNotify::kNFaceFieldNumber;
const int UserInfoNotify::kPrivateInfosFieldNumber;
#endif  // !_MSC_VER

UserInfoNotify::UserInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfoNotify::InitAsDefaultInstance() {
  privateinfos_ = const_cast< ::tms::UserPrivateInfo*>(&::tms::UserPrivateInfo::default_instance());
}

UserInfoNotify::UserInfoNotify(const UserInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nface_ = 0u;
  privateinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoNotify::~UserInfoNotify() {
  SharedDtor();
}

void UserInfoNotify::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
    delete privateinfos_;
  }
}

void UserInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoNotify_descriptor_;
}

const UserInfoNotify& UserInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserInfoNotify* UserInfoNotify::default_instance_ = NULL;

UserInfoNotify* UserInfoNotify::New() const {
  return new UserInfoNotify;
}

void UserInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    nface_ = 0u;
    if (has_privateinfos()) {
      if (privateinfos_ != NULL) privateinfos_->::tms::UserPrivateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strAccountNo;
        break;
      }

      // optional string strAccountNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAccountNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strNickName;
        break;
      }

      // optional string strNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nFace;
        break;
      }

      // optional uint32 nFace = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nface_)));
          set_has_nface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PrivateInfos;
        break;
      }

      // optional .tms.UserPrivateInfo PrivateInfos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrivateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privateinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // optional string strAccountNo = 2;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->straccountno(), output);
  }

  // optional string strNickName = 3;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strnickname(), output);
  }

  // optional uint32 nFace = 4 [default = 0];
  if (has_nface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nface(), output);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 5;
  if (has_privateinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->privateinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // optional string strAccountNo = 2;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->straccountno(), target);
  }

  // optional string strNickName = 3;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strnickname(), target);
  }

  // optional uint32 nFace = 4 [default = 0];
  if (has_nface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nface(), target);
  }

  // optional .tms.UserPrivateInfo PrivateInfos = 5;
  if (has_privateinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->privateinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1 [default = 0];
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // optional string strAccountNo = 2;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // optional string strNickName = 3;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

    // optional uint32 nFace = 4 [default = 0];
    if (has_nface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nface());
    }

    // optional .tms.UserPrivateInfo PrivateInfos = 5;
    if (has_privateinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privateinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoNotify::MergeFrom(const UserInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_nface()) {
      set_nface(from.nface());
    }
    if (from.has_privateinfos()) {
      mutable_privateinfos()->::tms::UserPrivateInfo::MergeFrom(from.privateinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoNotify::CopyFrom(const UserInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserInfoNotify::Swap(UserInfoNotify* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(straccountno_, other->straccountno_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(nface_, other->nface_);
    std::swap(privateinfos_, other->privateinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoNotify_descriptor_;
  metadata.reflection = UserInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetsAddNotify::kTargetsAddsFieldNumber;
const int TargetsAddNotify::kTargetInfosFieldNumber;
#endif  // !_MSC_VER

TargetsAddNotify::TargetsAddNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetsAddNotify::InitAsDefaultInstance() {
  targetsadds_ = const_cast< ::tms::TargetsAdd*>(&::tms::TargetsAdd::default_instance());
  targetinfos_ = const_cast< ::tms::TargetInfo*>(&::tms::TargetInfo::default_instance());
}

TargetsAddNotify::TargetsAddNotify(const TargetsAddNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetsAddNotify::SharedCtor() {
  _cached_size_ = 0;
  targetsadds_ = NULL;
  targetinfos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetsAddNotify::~TargetsAddNotify() {
  SharedDtor();
}

void TargetsAddNotify::SharedDtor() {
  if (this != default_instance_) {
    delete targetsadds_;
    delete targetinfos_;
  }
}

void TargetsAddNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetsAddNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetsAddNotify_descriptor_;
}

const TargetsAddNotify& TargetsAddNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TargetsAddNotify* TargetsAddNotify::default_instance_ = NULL;

TargetsAddNotify* TargetsAddNotify::New() const {
  return new TargetsAddNotify;
}

void TargetsAddNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_targetsadds()) {
      if (targetsadds_ != NULL) targetsadds_->::tms::TargetsAdd::Clear();
    }
    if (has_targetinfos()) {
      if (targetinfos_ != NULL) targetinfos_->::tms::TargetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetsAddNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tms.TargetsAdd TargetsAdds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetsadds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TargetInfos;
        break;
      }

      // required .tms.TargetInfo TargetInfos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargetInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetsAddNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tms.TargetsAdd TargetsAdds = 1;
  if (has_targetsadds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targetsadds(), output);
  }

  // required .tms.TargetInfo TargetInfos = 3;
  if (has_targetinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetinfos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetsAddNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tms.TargetsAdd TargetsAdds = 1;
  if (has_targetsadds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targetsadds(), target);
  }

  // required .tms.TargetInfo TargetInfos = 3;
  if (has_targetinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetinfos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetsAddNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tms.TargetsAdd TargetsAdds = 1;
    if (has_targetsadds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetsadds());
    }

    // required .tms.TargetInfo TargetInfos = 3;
    if (has_targetinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetinfos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetsAddNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetsAddNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetsAddNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetsAddNotify::MergeFrom(const TargetsAddNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetsadds()) {
      mutable_targetsadds()->::tms::TargetsAdd::MergeFrom(from.targetsadds());
    }
    if (from.has_targetinfos()) {
      mutable_targetinfos()->::tms::TargetInfo::MergeFrom(from.targetinfos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetsAddNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetsAddNotify::CopyFrom(const TargetsAddNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetsAddNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_targetsadds()) {
    if (!this->targetsadds().IsInitialized()) return false;
  }
  if (has_targetinfos()) {
    if (!this->targetinfos().IsInitialized()) return false;
  }
  return true;
}

void TargetsAddNotify::Swap(TargetsAddNotify* other) {
  if (other != this) {
    std::swap(targetsadds_, other->targetsadds_);
    std::swap(targetinfos_, other->targetinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetsAddNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetsAddNotify_descriptor_;
  metadata.reflection = TargetsAddNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetsNotify::kTargetssFieldNumber;
#endif  // !_MSC_VER

TargetsNotify::TargetsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetsNotify::InitAsDefaultInstance() {
}

TargetsNotify::TargetsNotify(const TargetsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetsNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetsNotify::~TargetsNotify() {
  SharedDtor();
}

void TargetsNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetsNotify_descriptor_;
}

const TargetsNotify& TargetsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

TargetsNotify* TargetsNotify::default_instance_ = NULL;

TargetsNotify* TargetsNotify::New() const {
  return new TargetsNotify;
}

void TargetsNotify::Clear() {
  targetss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.Targets Targetss = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Targetss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Targetss;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.Targets Targetss = 1;
  for (int i = 0; i < this->targetss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targetss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.Targets Targetss = 1;
  for (int i = 0; i < this->targetss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targetss(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetsNotify::ByteSize() const {
  int total_size = 0;

  // repeated .tms.Targets Targetss = 1;
  total_size += 1 * this->targetss_size();
  for (int i = 0; i < this->targetss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targetss(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetsNotify::MergeFrom(const TargetsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetss_.MergeFrom(from.targetss_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetsNotify::CopyFrom(const TargetsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetsNotify::IsInitialized() const {

  for (int i = 0; i < targetss_size(); i++) {
    if (!this->targetss(i).IsInitialized()) return false;
  }
  return true;
}

void TargetsNotify::Swap(TargetsNotify* other) {
  if (other != this) {
    targetss_.Swap(&other->targetss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetsNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetsNotify_descriptor_;
  metadata.reflection = TargetsNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserOnlineNotify::kUAccountIDFieldNumber;
const int UserOnlineNotify::kUServerIDFieldNumber;
const int UserOnlineNotify::kULoginFlagFieldNumber;
#endif  // !_MSC_VER

UserOnlineNotify::UserOnlineNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserOnlineNotify::InitAsDefaultInstance() {
}

UserOnlineNotify::UserOnlineNotify(const UserOnlineNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserOnlineNotify::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  userverid_ = 0u;
  uloginflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOnlineNotify::~UserOnlineNotify() {
  SharedDtor();
}

void UserOnlineNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserOnlineNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOnlineNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOnlineNotify_descriptor_;
}

const UserOnlineNotify& UserOnlineNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserOnlineNotify* UserOnlineNotify::default_instance_ = NULL;

UserOnlineNotify* UserOnlineNotify::New() const {
  return new UserOnlineNotify;
}

void UserOnlineNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    userverid_ = 0u;
    uloginflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOnlineNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uServerID;
        break;
      }

      // required uint32 uServerID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userverid_)));
          set_has_userverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uLoginFlag;
        break;
      }

      // required uint32 uLoginFlag = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLoginFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uloginflag_)));
          set_has_uloginflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserOnlineNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // required uint32 uServerID = 2 [default = 0];
  if (has_userverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userverid(), output);
  }

  // required uint32 uLoginFlag = 3 [default = 0];
  if (has_uloginflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uloginflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserOnlineNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // required uint32 uServerID = 2 [default = 0];
  if (has_userverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userverid(), target);
  }

  // required uint32 uLoginFlag = 3 [default = 0];
  if (has_uloginflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uloginflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserOnlineNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1 [default = 0];
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // required uint32 uServerID = 2 [default = 0];
    if (has_userverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userverid());
    }

    // required uint32 uLoginFlag = 3 [default = 0];
    if (has_uloginflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uloginflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOnlineNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOnlineNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOnlineNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOnlineNotify::MergeFrom(const UserOnlineNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_userverid()) {
      set_userverid(from.userverid());
    }
    if (from.has_uloginflag()) {
      set_uloginflag(from.uloginflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOnlineNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOnlineNotify::CopyFrom(const UserOnlineNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOnlineNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserOnlineNotify::Swap(UserOnlineNotify* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(userverid_, other->userverid_);
    std::swap(uloginflag_, other->uloginflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOnlineNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOnlineNotify_descriptor_;
  metadata.reflection = UserOnlineNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginFlag::kUAccountIDFieldNumber;
const int UserLoginFlag::kULoginFlagsFieldNumber;
#endif  // !_MSC_VER

UserLoginFlag::UserLoginFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginFlag::InitAsDefaultInstance() {
}

UserLoginFlag::UserLoginFlag(const UserLoginFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginFlag::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  uloginflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginFlag::~UserLoginFlag() {
  SharedDtor();
}

void UserLoginFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLoginFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginFlag_descriptor_;
}

const UserLoginFlag& UserLoginFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserLoginFlag* UserLoginFlag::default_instance_ = NULL;

UserLoginFlag* UserLoginFlag::New() const {
  return new UserLoginFlag;
}

void UserLoginFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    uloginflags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uLoginFlags;
        break;
      }

      // required uint32 uLoginFlags = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLoginFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uloginflags_)));
          set_has_uloginflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // required uint32 uLoginFlags = 2 [default = 0];
  if (has_uloginflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uloginflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // required uint32 uLoginFlags = 2 [default = 0];
  if (has_uloginflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uloginflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1 [default = 0];
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // required uint32 uLoginFlags = 2 [default = 0];
    if (has_uloginflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uloginflags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginFlag::MergeFrom(const UserLoginFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_uloginflags()) {
      set_uloginflags(from.uloginflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginFlag::CopyFrom(const UserLoginFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserLoginFlag::Swap(UserLoginFlag* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(uloginflags_, other->uloginflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginFlag_descriptor_;
  metadata.reflection = UserLoginFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginFlagList::kUserLoginFlagsFieldNumber;
#endif  // !_MSC_VER

UserLoginFlagList::UserLoginFlagList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginFlagList::InitAsDefaultInstance() {
}

UserLoginFlagList::UserLoginFlagList(const UserLoginFlagList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginFlagList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginFlagList::~UserLoginFlagList() {
  SharedDtor();
}

void UserLoginFlagList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLoginFlagList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginFlagList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginFlagList_descriptor_;
}

const UserLoginFlagList& UserLoginFlagList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

UserLoginFlagList* UserLoginFlagList::default_instance_ = NULL;

UserLoginFlagList* UserLoginFlagList::New() const {
  return new UserLoginFlagList;
}

void UserLoginFlagList::Clear() {
  userloginflags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginFlagList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.UserLoginFlag UserLoginFlags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserLoginFlags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userloginflags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_UserLoginFlags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginFlagList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.UserLoginFlag UserLoginFlags = 1;
  for (int i = 0; i < this->userloginflags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userloginflags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginFlagList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.UserLoginFlag UserLoginFlags = 1;
  for (int i = 0; i < this->userloginflags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userloginflags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginFlagList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.UserLoginFlag UserLoginFlags = 1;
  total_size += 1 * this->userloginflags_size();
  for (int i = 0; i < this->userloginflags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userloginflags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginFlagList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginFlagList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginFlagList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginFlagList::MergeFrom(const UserLoginFlagList& from) {
  GOOGLE_CHECK_NE(&from, this);
  userloginflags_.MergeFrom(from.userloginflags_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginFlagList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginFlagList::CopyFrom(const UserLoginFlagList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginFlagList::IsInitialized() const {

  for (int i = 0; i < userloginflags_size(); i++) {
    if (!this->userloginflags(i).IsInitialized()) return false;
  }
  return true;
}

void UserLoginFlagList::Swap(UserLoginFlagList* other) {
  if (other != this) {
    userloginflags_.Swap(&other->userloginflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginFlagList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginFlagList_descriptor_;
  metadata.reflection = UserLoginFlagList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatUser::kUAccountIDFieldNumber;
const int ChatUser::kUTargetIDFieldNumber;
const int ChatUser::kURightFieldNumber;
#endif  // !_MSC_VER

ChatUser::ChatUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatUser::InitAsDefaultInstance() {
}

ChatUser::ChatUser(const ChatUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatUser::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  utargetid_ = 0u;
  uright_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatUser::~ChatUser() {
  SharedDtor();
}

void ChatUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatUser_descriptor_;
}

const ChatUser& ChatUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

ChatUser* ChatUser::default_instance_ = NULL;

ChatUser* ChatUser::New() const {
  return new ChatUser;
}

void ChatUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    utargetid_ = 0u;
    uright_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uTargetID;
        break;
      }

      // required uint32 uTargetID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTargetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uRight;
        break;
      }

      // required uint32 uRight = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uright_)));
          set_has_uright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utargetid(), output);
  }

  // required uint32 uRight = 3 [default = 0];
  if (has_uright()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uright(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // required uint32 uTargetID = 2 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utargetid(), target);
  }

  // required uint32 uRight = 3 [default = 0];
  if (has_uright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uright(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1 [default = 0];
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // required uint32 uTargetID = 2 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uRight = 3 [default = 0];
    if (has_uright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uright());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatUser::MergeFrom(const ChatUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_uright()) {
      set_uright(from.uright());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatUser::CopyFrom(const ChatUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ChatUser::Swap(ChatUser* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(utargetid_, other->utargetid_);
    std::swap(uright_, other->uright_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatUser_descriptor_;
  metadata.reflection = ChatUser_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tms

// @@protoc_insertion_point(global_scope)
