// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tms.proto
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tms {

namespace {

const ::google::protobuf::Descriptor* AnsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileLoadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLoadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileLoadData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileLoadData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateServerReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StateServerReq_cmd_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargtServerID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargtServerID_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargtServerIDList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargtServerIDList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetOnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetOnlineInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* cmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tms_2eproto() {
  protobuf_AddDesc_tms_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tms.proto");
  GOOGLE_CHECK(file != NULL);
  AnsInfo_descriptor_ = file->message_type(0);
  static const int AnsInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, uerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, tcmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, straccountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, uaccountid_),
  };
  AnsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnsInfo_descriptor_,
      AnsInfo::default_instance_,
      AnsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnsInfo));
  ServerTime_descriptor_ = file->message_type(1);
  static const int ServerTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, uservertime_),
  };
  ServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTime_descriptor_,
      ServerTime::default_instance_,
      ServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTime));
  FileLoadInfo_descriptor_ = file->message_type(2);
  static const int FileLoadInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, uoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, udownsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, ulocalsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, ulocaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, bversion_),
  };
  FileLoadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileLoadInfo_descriptor_,
      FileLoadInfo::default_instance_,
      FileLoadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileLoadInfo));
  FileLoadData_descriptor_ = file->message_type(3);
  static const int FileLoadData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, uerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, ufilesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, uoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, udownsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, utmmodified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, szdata_),
  };
  FileLoadData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileLoadData_descriptor_,
      FileLoadData::default_instance_,
      FileLoadData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileLoadData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileLoadData));
  StateServerReq_descriptor_ = file->message_type(4);
  static const int StateServerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateServerReq, ncmd_),
  };
  StateServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateServerReq_descriptor_,
      StateServerReq::default_instance_,
      StateServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateServerReq));
  StateServerReq_cmd_descriptor_ = StateServerReq_descriptor_->enum_type(0);
  ServerInfo_descriptor_ = file->message_type(5);
  static const int ServerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, userverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, strserverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, usserverport_),
  };
  ServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfo));
  ServerOut_descriptor_ = file->message_type(6);
  static const int ServerOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOut, userverid_),
  };
  ServerOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerOut_descriptor_,
      ServerOut::default_instance_,
      ServerOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerOut));
  ServerInfoList_descriptor_ = file->message_type(7);
  static const int ServerInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoList, serverinfos_),
  };
  ServerInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoList_descriptor_,
      ServerInfoList::default_instance_,
      ServerInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoList));
  TargtServerID_descriptor_ = file->message_type(8);
  static const int TargtServerID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerID, utargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerID, userverid_),
  };
  TargtServerID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargtServerID_descriptor_,
      TargtServerID::default_instance_,
      TargtServerID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargtServerID));
  TargtServerIDList_descriptor_ = file->message_type(9);
  static const int TargtServerIDList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerIDList, targtserverids_),
  };
  TargtServerIDList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargtServerIDList_descriptor_,
      TargtServerIDList::default_instance_,
      TargtServerIDList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerIDList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargtServerIDList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargtServerIDList));
  TargetOnlineInfo_descriptor_ = file->message_type(10);
  static const int TargetOnlineInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetOnlineInfo, uaccountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetOnlineInfo, usessionid_),
  };
  TargetOnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetOnlineInfo_descriptor_,
      TargetOnlineInfo::default_instance_,
      TargetOnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetOnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetOnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetOnlineInfo));
  cmd_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tms_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnsInfo_descriptor_, &AnsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTime_descriptor_, &ServerTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileLoadInfo_descriptor_, &FileLoadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileLoadData_descriptor_, &FileLoadData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateServerReq_descriptor_, &StateServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerOut_descriptor_, &ServerOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoList_descriptor_, &ServerInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargtServerID_descriptor_, &TargtServerID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargtServerIDList_descriptor_, &TargtServerIDList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetOnlineInfo_descriptor_, &TargetOnlineInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tms_2eproto() {
  delete AnsInfo::default_instance_;
  delete AnsInfo_reflection_;
  delete ServerTime::default_instance_;
  delete ServerTime_reflection_;
  delete FileLoadInfo::default_instance_;
  delete FileLoadInfo_reflection_;
  delete FileLoadData::default_instance_;
  delete FileLoadData_reflection_;
  delete StateServerReq::default_instance_;
  delete StateServerReq_reflection_;
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete ServerOut::default_instance_;
  delete ServerOut_reflection_;
  delete ServerInfoList::default_instance_;
  delete ServerInfoList_reflection_;
  delete TargtServerID::default_instance_;
  delete TargtServerID_reflection_;
  delete TargtServerIDList::default_instance_;
  delete TargtServerIDList_reflection_;
  delete TargetOnlineInfo::default_instance_;
  delete TargetOnlineInfo_reflection_;
}

void protobuf_AddDesc_tms_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ttms.proto\022\003tms\"[\n\007AnsInfo\022\016\n\006uError\030\001 "
    "\002(\r\022\026\n\004tCmd\030\002 \002(\0162\010.tms.cmd\022\024\n\014strAccoun"
    "tNo\030\003 \001(\t\022\022\n\nuAccountID\030\004 \002(\r\"!\n\nServerT"
    "ime\022\023\n\013uServerTime\030\001 \002(\004\"}\n\014FileLoadInfo"
    "\022\017\n\007strName\030\001 \002(\t\022\017\n\007uOffset\030\002 \002(\r\022\021\n\tuD"
    "ownsize\030\003 \002(\r\022\022\n\nuLocalsize\030\004 \002(\r\022\022\n\nuLo"
    "caltime\030\005 \002(\r\022\020\n\010bVersion\030\006 \002(\r\"z\n\014FileL"
    "oadData\022\016\n\006uError\030\001 \002(\r\022\021\n\tuFilesize\030\002 \002"
    "(\r\022\017\n\007uOffset\030\003 \002(\r\022\021\n\tuDownsize\030\004 \002(\r\022\023"
    "\n\013uTmmodified\030\005 \002(\r\022\016\n\006szData\030\006 \001(\014\"\263\001\n\016"
    "StateServerReq\022%\n\004ncmd\030\001 \002(\0162\027.tms.State"
    "ServerReq.cmd\"z\n\003cmd\022\020\n\014ChatMsgIDALL\020\001\022\020"
    "\n\014TalkMsgIDALL\020\002\022\020\n\014UserMsgIDALL\020\003\022\021\n\rTa"
    "rgetInfoALL\020\004\022\024\n\020TargtServerIDALL\020\005\022\024\n\020U"
    "serLoginFlagALL\020\006\"J\n\nServerInfo\022\021\n\tuServ"
    "erID\030\001 \002(\r\022\023\n\013strServerIP\030\002 \002(\t\022\024\n\014usSer"
    "verPort\030\003 \002(\r\"\036\n\tServerOut\022\021\n\tuServerID\030"
    "\001 \002(\r\"6\n\016ServerInfoList\022$\n\013ServerInfos\030\001"
    " \003(\0132\017.tms.ServerInfo\";\n\rTargtServerID\022\024"
    "\n\tuTargetID\030\001 \002(\r:\0010\022\024\n\tuServerID\030\002 \002(\r:"
    "\0010\"\?\n\021TargtServerIDList\022*\n\016TargtServerID"
    "s\030\001 \003(\0132\022.tms.TargtServerID\"@\n\020TargetOnl"
    "ineInfo\022\025\n\nuAccountID\030\001 \002(\r:\0010\022\025\n\nuSessi"
    "onID\030\002 \002(\r:\0010*\343\006\n\003cmd\022\r\n\tn_AnsInfo\020\000\022\r\n\t"
    "n_TalkMsg\020\001\022\020\n\014n_TalkMsgAns\020\002\022\024\n\020n_PullT"
    "alkMsgReq\020\003\022\023\n\017n_MsgInfoNotify\020\013\022\020\n\014n_Ta"
    "rgetInfo\020\"\022\020\n\014n_FriendInfo\020#\022\021\n\rn_UserTa"
    "rgets\020$\022\025\n\021n_UserPrivateInfo\020%\022\016\n\nn_User"
    "Info\020&\022\024\n\020n_UserOnlineInfo\020\'\022\017\n\013n_LoginI"
    "nfo\020(\022\022\n\016n_RegisterInfo\020)\022\021\n\rn_UserInfoR"
    "eq\020*\022\022\n\016n_TargetsQuery\020+\022\024\n\020n_UpdateUser"
    "Info\020,\022\020\n\014n_TargetsAdd\020-\022\026\n\022n_UpdateTarg"
    "etInfo\020.\022\024\n\020n_StateServerReq\020/\022\022\n\016n_User"
    "Info_Old\0200\022\024\n\020n_UserInfoNotify\020e\022\030\n\024n_Us"
    "erBaseInfoNotify\020f\022\026\n\022n_TargetsAddNotify"
    "\020g\022\023\n\017n_TargetsNotify\020h\022\026\n\022n_UserOnlineN"
    "otify\020i\022\023\n\016n_ReqHeartbeat\020\351\007\022\023\n\016n_AnsHea"
    "rtbeat\020\352\007\022\021\n\014n_ServerTime\020\353\007\022\023\n\016n_FileLo"
    "adData\020\357\007\022\023\n\016n_FileLoadInfo\020\360\007\022\033\n\026n_User"
    "OnlineNotifyList\020\374\007\022\026\n\021n_TalkMsgBaseList"
    "\020\375\007\022\026\n\021n_ChatMsgBaseList\020\376\007\022\024\n\017n_UserMsg"
    "IDList\020\377\007\022\021\n\014n_ServerInfo\020\200\010\022\025\n\020n_Server"
    "InfoList\020\201\010\022\020\n\013n_ServerOut\020\202\010\022\030\n\023n_Targt"
    "ServerIDList\020\203\010\022\030\n\023n_UserLoginFlagList\020\204"
    "\010\022\027\n\022n_TargetOnlineInfo\020\205\010\022\017\n\nn_ChatUser"
    "\020\206\010", 1803);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tms.proto", &protobuf_RegisterTypes);
  AnsInfo::default_instance_ = new AnsInfo();
  ServerTime::default_instance_ = new ServerTime();
  FileLoadInfo::default_instance_ = new FileLoadInfo();
  FileLoadData::default_instance_ = new FileLoadData();
  StateServerReq::default_instance_ = new StateServerReq();
  ServerInfo::default_instance_ = new ServerInfo();
  ServerOut::default_instance_ = new ServerOut();
  ServerInfoList::default_instance_ = new ServerInfoList();
  TargtServerID::default_instance_ = new TargtServerID();
  TargtServerIDList::default_instance_ = new TargtServerIDList();
  TargetOnlineInfo::default_instance_ = new TargetOnlineInfo();
  AnsInfo::default_instance_->InitAsDefaultInstance();
  ServerTime::default_instance_->InitAsDefaultInstance();
  FileLoadInfo::default_instance_->InitAsDefaultInstance();
  FileLoadData::default_instance_->InitAsDefaultInstance();
  StateServerReq::default_instance_->InitAsDefaultInstance();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  ServerOut::default_instance_->InitAsDefaultInstance();
  ServerInfoList::default_instance_->InitAsDefaultInstance();
  TargtServerID::default_instance_->InitAsDefaultInstance();
  TargtServerIDList::default_instance_->InitAsDefaultInstance();
  TargetOnlineInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tms_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tms_2eproto {
  StaticDescriptorInitializer_tms_2eproto() {
    protobuf_AddDesc_tms_2eproto();
  }
} static_descriptor_initializer_tms_2eproto_;
const ::google::protobuf::EnumDescriptor* cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmd_descriptor_;
}
bool cmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 11:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 1001:
    case 1002:
    case 1003:
    case 1007:
    case 1008:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AnsInfo::kUErrorFieldNumber;
const int AnsInfo::kTCmdFieldNumber;
const int AnsInfo::kStrAccountNoFieldNumber;
const int AnsInfo::kUAccountIDFieldNumber;
#endif  // !_MSC_VER

AnsInfo::AnsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnsInfo::InitAsDefaultInstance() {
}

AnsInfo::AnsInfo(const AnsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnsInfo::SharedCtor() {
  _cached_size_ = 0;
  uerror_ = 0u;
  tcmd_ = 0;
  straccountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uaccountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnsInfo::~AnsInfo() {
  SharedDtor();
}

void AnsInfo::SharedDtor() {
  if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
    delete straccountno_;
  }
  if (this != default_instance_) {
  }
}

void AnsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnsInfo_descriptor_;
}

const AnsInfo& AnsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

AnsInfo* AnsInfo::default_instance_ = NULL;

AnsInfo* AnsInfo::New() const {
  return new AnsInfo;
}

void AnsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uerror_ = 0u;
    tcmd_ = 0;
    if (has_straccountno()) {
      if (straccountno_ != &::google::protobuf::internal::kEmptyString) {
        straccountno_->clear();
      }
    }
    uaccountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uError = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uerror_)));
          set_has_uerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tCmd;
        break;
      }

      // required .tms.cmd tCmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tCmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tms::cmd_IsValid(value)) {
            set_tcmd(static_cast< ::tms::cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strAccountNo;
        break;
      }

      // optional string strAccountNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAccountNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccountno().data(), this->straccountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uAccountID;
        break;
      }

      // required uint32 uAccountID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uAccountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uError = 1;
  if (has_uerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uerror(), output);
  }

  // required .tms.cmd tCmd = 2;
  if (has_tcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tcmd(), output);
  }

  // optional string strAccountNo = 3;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->straccountno(), output);
  }

  // required uint32 uAccountID = 4;
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uaccountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uError = 1;
  if (has_uerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uerror(), target);
  }

  // required .tms.cmd tCmd = 2;
  if (has_tcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tcmd(), target);
  }

  // optional string strAccountNo = 3;
  if (has_straccountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccountno().data(), this->straccountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->straccountno(), target);
  }

  // required uint32 uAccountID = 4;
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uaccountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uError = 1;
    if (has_uerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uerror());
    }

    // required .tms.cmd tCmd = 2;
    if (has_tcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcmd());
    }

    // optional string strAccountNo = 3;
    if (has_straccountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccountno());
    }

    // required uint32 uAccountID = 4;
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnsInfo::MergeFrom(const AnsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uerror()) {
      set_uerror(from.uerror());
    }
    if (from.has_tcmd()) {
      set_tcmd(from.tcmd());
    }
    if (from.has_straccountno()) {
      set_straccountno(from.straccountno());
    }
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnsInfo::CopyFrom(const AnsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void AnsInfo::Swap(AnsInfo* other) {
  if (other != this) {
    std::swap(uerror_, other->uerror_);
    std::swap(tcmd_, other->tcmd_);
    std::swap(straccountno_, other->straccountno_);
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnsInfo_descriptor_;
  metadata.reflection = AnsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTime::kUServerTimeFieldNumber;
#endif  // !_MSC_VER

ServerTime::ServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerTime::InitAsDefaultInstance() {
}

ServerTime::ServerTime(const ServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerTime::SharedCtor() {
  _cached_size_ = 0;
  uservertime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTime::~ServerTime() {
  SharedDtor();
}

void ServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTime_descriptor_;
}

const ServerTime& ServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

ServerTime* ServerTime::default_instance_ = NULL;

ServerTime* ServerTime::New() const {
  return new ServerTime;
}

void ServerTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uservertime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uServerTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uservertime_)));
          set_has_uservertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uServerTime = 1;
  if (has_uservertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uservertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uServerTime = 1;
  if (has_uservertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uservertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uServerTime = 1;
    if (has_uservertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uservertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerTime::MergeFrom(const ServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uservertime()) {
      set_uservertime(from.uservertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTime::CopyFrom(const ServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerTime::Swap(ServerTime* other) {
  if (other != this) {
    std::swap(uservertime_, other->uservertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTime_descriptor_;
  metadata.reflection = ServerTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileLoadInfo::kStrNameFieldNumber;
const int FileLoadInfo::kUOffsetFieldNumber;
const int FileLoadInfo::kUDownsizeFieldNumber;
const int FileLoadInfo::kULocalsizeFieldNumber;
const int FileLoadInfo::kULocaltimeFieldNumber;
const int FileLoadInfo::kBVersionFieldNumber;
#endif  // !_MSC_VER

FileLoadInfo::FileLoadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileLoadInfo::InitAsDefaultInstance() {
}

FileLoadInfo::FileLoadInfo(const FileLoadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileLoadInfo::SharedCtor() {
  _cached_size_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uoffset_ = 0u;
  udownsize_ = 0u;
  ulocalsize_ = 0u;
  ulocaltime_ = 0u;
  bversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileLoadInfo::~FileLoadInfo() {
  SharedDtor();
}

void FileLoadInfo::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void FileLoadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLoadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLoadInfo_descriptor_;
}

const FileLoadInfo& FileLoadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

FileLoadInfo* FileLoadInfo::default_instance_ = NULL;

FileLoadInfo* FileLoadInfo::New() const {
  return new FileLoadInfo;
}

void FileLoadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    uoffset_ = 0u;
    udownsize_ = 0u;
    ulocalsize_ = 0u;
    ulocaltime_ = 0u;
    bversion_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileLoadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uOffset;
        break;
      }

      // required uint32 uOffset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uoffset_)));
          set_has_uoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uDownsize;
        break;
      }

      // required uint32 uDownsize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uDownsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udownsize_)));
          set_has_udownsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uLocalsize;
        break;
      }

      // required uint32 uLocalsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLocalsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ulocalsize_)));
          set_has_ulocalsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uLocaltime;
        break;
      }

      // required uint32 uLocaltime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLocaltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ulocaltime_)));
          set_has_ulocaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bVersion;
        break;
      }

      // required uint32 bVersion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bversion_)));
          set_has_bversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileLoadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strname(), output);
  }

  // required uint32 uOffset = 2;
  if (has_uoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uoffset(), output);
  }

  // required uint32 uDownsize = 3;
  if (has_udownsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->udownsize(), output);
  }

  // required uint32 uLocalsize = 4;
  if (has_ulocalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ulocalsize(), output);
  }

  // required uint32 uLocaltime = 5;
  if (has_ulocaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ulocaltime(), output);
  }

  // required uint32 bVersion = 6;
  if (has_bversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileLoadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strname(), target);
  }

  // required uint32 uOffset = 2;
  if (has_uoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uoffset(), target);
  }

  // required uint32 uDownsize = 3;
  if (has_udownsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->udownsize(), target);
  }

  // required uint32 uLocalsize = 4;
  if (has_ulocalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ulocalsize(), target);
  }

  // required uint32 uLocaltime = 5;
  if (has_ulocaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ulocaltime(), target);
  }

  // required uint32 bVersion = 6;
  if (has_bversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileLoadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strName = 1;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // required uint32 uOffset = 2;
    if (has_uoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uoffset());
    }

    // required uint32 uDownsize = 3;
    if (has_udownsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->udownsize());
    }

    // required uint32 uLocalsize = 4;
    if (has_ulocalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ulocalsize());
    }

    // required uint32 uLocaltime = 5;
    if (has_ulocaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ulocaltime());
    }

    // required uint32 bVersion = 6;
    if (has_bversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLoadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileLoadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileLoadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileLoadInfo::MergeFrom(const FileLoadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_uoffset()) {
      set_uoffset(from.uoffset());
    }
    if (from.has_udownsize()) {
      set_udownsize(from.udownsize());
    }
    if (from.has_ulocalsize()) {
      set_ulocalsize(from.ulocalsize());
    }
    if (from.has_ulocaltime()) {
      set_ulocaltime(from.ulocaltime());
    }
    if (from.has_bversion()) {
      set_bversion(from.bversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileLoadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLoadInfo::CopyFrom(const FileLoadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileLoadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FileLoadInfo::Swap(FileLoadInfo* other) {
  if (other != this) {
    std::swap(strname_, other->strname_);
    std::swap(uoffset_, other->uoffset_);
    std::swap(udownsize_, other->udownsize_);
    std::swap(ulocalsize_, other->ulocalsize_);
    std::swap(ulocaltime_, other->ulocaltime_);
    std::swap(bversion_, other->bversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileLoadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLoadInfo_descriptor_;
  metadata.reflection = FileLoadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileLoadData::kUErrorFieldNumber;
const int FileLoadData::kUFilesizeFieldNumber;
const int FileLoadData::kUOffsetFieldNumber;
const int FileLoadData::kUDownsizeFieldNumber;
const int FileLoadData::kUTmmodifiedFieldNumber;
const int FileLoadData::kSzDataFieldNumber;
#endif  // !_MSC_VER

FileLoadData::FileLoadData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileLoadData::InitAsDefaultInstance() {
}

FileLoadData::FileLoadData(const FileLoadData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileLoadData::SharedCtor() {
  _cached_size_ = 0;
  uerror_ = 0u;
  ufilesize_ = 0u;
  uoffset_ = 0u;
  udownsize_ = 0u;
  utmmodified_ = 0u;
  szdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileLoadData::~FileLoadData() {
  SharedDtor();
}

void FileLoadData::SharedDtor() {
  if (szdata_ != &::google::protobuf::internal::kEmptyString) {
    delete szdata_;
  }
  if (this != default_instance_) {
  }
}

void FileLoadData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileLoadData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileLoadData_descriptor_;
}

const FileLoadData& FileLoadData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

FileLoadData* FileLoadData::default_instance_ = NULL;

FileLoadData* FileLoadData::New() const {
  return new FileLoadData;
}

void FileLoadData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uerror_ = 0u;
    ufilesize_ = 0u;
    uoffset_ = 0u;
    udownsize_ = 0u;
    utmmodified_ = 0u;
    if (has_szdata()) {
      if (szdata_ != &::google::protobuf::internal::kEmptyString) {
        szdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileLoadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uError = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uerror_)));
          set_has_uerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uFilesize;
        break;
      }

      // required uint32 uFilesize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFilesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufilesize_)));
          set_has_ufilesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uOffset;
        break;
      }

      // required uint32 uOffset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uoffset_)));
          set_has_uoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uDownsize;
        break;
      }

      // required uint32 uDownsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uDownsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udownsize_)));
          set_has_udownsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uTmmodified;
        break;
      }

      // required uint32 uTmmodified = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uTmmodified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utmmodified_)));
          set_has_utmmodified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_szData;
        break;
      }

      // optional bytes szData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileLoadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uError = 1;
  if (has_uerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uerror(), output);
  }

  // required uint32 uFilesize = 2;
  if (has_ufilesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ufilesize(), output);
  }

  // required uint32 uOffset = 3;
  if (has_uoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uoffset(), output);
  }

  // required uint32 uDownsize = 4;
  if (has_udownsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->udownsize(), output);
  }

  // required uint32 uTmmodified = 5;
  if (has_utmmodified()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->utmmodified(), output);
  }

  // optional bytes szData = 6;
  if (has_szdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->szdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileLoadData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uError = 1;
  if (has_uerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uerror(), target);
  }

  // required uint32 uFilesize = 2;
  if (has_ufilesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ufilesize(), target);
  }

  // required uint32 uOffset = 3;
  if (has_uoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uoffset(), target);
  }

  // required uint32 uDownsize = 4;
  if (has_udownsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->udownsize(), target);
  }

  // required uint32 uTmmodified = 5;
  if (has_utmmodified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->utmmodified(), target);
  }

  // optional bytes szData = 6;
  if (has_szdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->szdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileLoadData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uError = 1;
    if (has_uerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uerror());
    }

    // required uint32 uFilesize = 2;
    if (has_ufilesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufilesize());
    }

    // required uint32 uOffset = 3;
    if (has_uoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uoffset());
    }

    // required uint32 uDownsize = 4;
    if (has_udownsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->udownsize());
    }

    // required uint32 uTmmodified = 5;
    if (has_utmmodified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utmmodified());
    }

    // optional bytes szData = 6;
    if (has_szdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->szdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileLoadData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileLoadData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileLoadData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileLoadData::MergeFrom(const FileLoadData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uerror()) {
      set_uerror(from.uerror());
    }
    if (from.has_ufilesize()) {
      set_ufilesize(from.ufilesize());
    }
    if (from.has_uoffset()) {
      set_uoffset(from.uoffset());
    }
    if (from.has_udownsize()) {
      set_udownsize(from.udownsize());
    }
    if (from.has_utmmodified()) {
      set_utmmodified(from.utmmodified());
    }
    if (from.has_szdata()) {
      set_szdata(from.szdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileLoadData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileLoadData::CopyFrom(const FileLoadData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileLoadData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FileLoadData::Swap(FileLoadData* other) {
  if (other != this) {
    std::swap(uerror_, other->uerror_);
    std::swap(ufilesize_, other->ufilesize_);
    std::swap(uoffset_, other->uoffset_);
    std::swap(udownsize_, other->udownsize_);
    std::swap(utmmodified_, other->utmmodified_);
    std::swap(szdata_, other->szdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileLoadData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileLoadData_descriptor_;
  metadata.reflection = FileLoadData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StateServerReq_cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateServerReq_cmd_descriptor_;
}
bool StateServerReq_cmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StateServerReq_cmd StateServerReq::ChatMsgIDALL;
const StateServerReq_cmd StateServerReq::TalkMsgIDALL;
const StateServerReq_cmd StateServerReq::UserMsgIDALL;
const StateServerReq_cmd StateServerReq::TargetInfoALL;
const StateServerReq_cmd StateServerReq::TargtServerIDALL;
const StateServerReq_cmd StateServerReq::UserLoginFlagALL;
const StateServerReq_cmd StateServerReq::cmd_MIN;
const StateServerReq_cmd StateServerReq::cmd_MAX;
const int StateServerReq::cmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StateServerReq::kNcmdFieldNumber;
#endif  // !_MSC_VER

StateServerReq::StateServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateServerReq::InitAsDefaultInstance() {
}

StateServerReq::StateServerReq(const StateServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateServerReq::SharedCtor() {
  _cached_size_ = 0;
  ncmd_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateServerReq::~StateServerReq() {
  SharedDtor();
}

void StateServerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateServerReq_descriptor_;
}

const StateServerReq& StateServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

StateServerReq* StateServerReq::default_instance_ = NULL;

StateServerReq* StateServerReq::New() const {
  return new StateServerReq;
}

void StateServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ncmd_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tms.StateServerReq.cmd ncmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tms::StateServerReq_cmd_IsValid(value)) {
            set_ncmd(static_cast< ::tms::StateServerReq_cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tms.StateServerReq.cmd ncmd = 1;
  if (has_ncmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ncmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tms.StateServerReq.cmd ncmd = 1;
  if (has_ncmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ncmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tms.StateServerReq.cmd ncmd = 1;
    if (has_ncmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ncmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateServerReq::MergeFrom(const StateServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ncmd()) {
      set_ncmd(from.ncmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateServerReq::CopyFrom(const StateServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StateServerReq::Swap(StateServerReq* other) {
  if (other != this) {
    std::swap(ncmd_, other->ncmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateServerReq_descriptor_;
  metadata.reflection = StateServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfo::kUServerIDFieldNumber;
const int ServerInfo::kStrServerIPFieldNumber;
const int ServerInfo::kUsServerPortFieldNumber;
#endif  // !_MSC_VER

ServerInfo::ServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  userverid_ = 0u;
  strserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usserverport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  if (strserverip_ != &::google::protobuf::internal::kEmptyString) {
    delete strserverip_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New() const {
  return new ServerInfo;
}

void ServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userverid_ = 0u;
    if (has_strserverip()) {
      if (strserverip_ != &::google::protobuf::internal::kEmptyString) {
        strserverip_->clear();
      }
    }
    usserverport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uServerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userverid_)));
          set_has_userverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strServerIP;
        break;
      }

      // required string strServerIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strServerIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strserverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strserverip().data(), this->strserverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usServerPort;
        break;
      }

      // required uint32 usServerPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usServerPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usserverport_)));
          set_has_usserverport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uServerID = 1;
  if (has_userverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userverid(), output);
  }

  // required string strServerIP = 2;
  if (has_strserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strserverip().data(), this->strserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strserverip(), output);
  }

  // required uint32 usServerPort = 3;
  if (has_usserverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usserverport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uServerID = 1;
  if (has_userverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userverid(), target);
  }

  // required string strServerIP = 2;
  if (has_strserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strserverip().data(), this->strserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strserverip(), target);
  }

  // required uint32 usServerPort = 3;
  if (has_usserverport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usserverport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uServerID = 1;
    if (has_userverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userverid());
    }

    // required string strServerIP = 2;
    if (has_strserverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strserverip());
    }

    // required uint32 usServerPort = 3;
    if (has_usserverport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usserverport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userverid()) {
      set_userverid(from.userverid());
    }
    if (from.has_strserverip()) {
      set_strserverip(from.strserverip());
    }
    if (from.has_usserverport()) {
      set_usserverport(from.usserverport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other != this) {
    std::swap(userverid_, other->userverid_);
    std::swap(strserverip_, other->strserverip_);
    std::swap(usserverport_, other->usserverport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerOut::kUServerIDFieldNumber;
#endif  // !_MSC_VER

ServerOut::ServerOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerOut::InitAsDefaultInstance() {
}

ServerOut::ServerOut(const ServerOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerOut::SharedCtor() {
  _cached_size_ = 0;
  userverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerOut::~ServerOut() {
  SharedDtor();
}

void ServerOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerOut_descriptor_;
}

const ServerOut& ServerOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

ServerOut* ServerOut::default_instance_ = NULL;

ServerOut* ServerOut::New() const {
  return new ServerOut;
}

void ServerOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uServerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userverid_)));
          set_has_userverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uServerID = 1;
  if (has_userverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uServerID = 1;
  if (has_userverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uServerID = 1;
    if (has_userverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerOut::MergeFrom(const ServerOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userverid()) {
      set_userverid(from.userverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerOut::CopyFrom(const ServerOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerOut::Swap(ServerOut* other) {
  if (other != this) {
    std::swap(userverid_, other->userverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerOut_descriptor_;
  metadata.reflection = ServerOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfoList::kServerInfosFieldNumber;
#endif  // !_MSC_VER

ServerInfoList::ServerInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfoList::InitAsDefaultInstance() {
}

ServerInfoList::ServerInfoList(const ServerInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoList::~ServerInfoList() {
  SharedDtor();
}

void ServerInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoList_descriptor_;
}

const ServerInfoList& ServerInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

ServerInfoList* ServerInfoList::default_instance_ = NULL;

ServerInfoList* ServerInfoList::New() const {
  return new ServerInfoList;
}

void ServerInfoList::Clear() {
  serverinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.ServerInfo ServerInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serverinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ServerInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.ServerInfo ServerInfos = 1;
  for (int i = 0; i < this->serverinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serverinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.ServerInfo ServerInfos = 1;
  for (int i = 0; i < this->serverinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serverinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.ServerInfo ServerInfos = 1;
  total_size += 1 * this->serverinfos_size();
  for (int i = 0; i < this->serverinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serverinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoList::MergeFrom(const ServerInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  serverinfos_.MergeFrom(from.serverinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoList::CopyFrom(const ServerInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoList::IsInitialized() const {

  for (int i = 0; i < serverinfos_size(); i++) {
    if (!this->serverinfos(i).IsInitialized()) return false;
  }
  return true;
}

void ServerInfoList::Swap(ServerInfoList* other) {
  if (other != this) {
    serverinfos_.Swap(&other->serverinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoList_descriptor_;
  metadata.reflection = ServerInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargtServerID::kUTargetIDFieldNumber;
const int TargtServerID::kUServerIDFieldNumber;
#endif  // !_MSC_VER

TargtServerID::TargtServerID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargtServerID::InitAsDefaultInstance() {
}

TargtServerID::TargtServerID(const TargtServerID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargtServerID::SharedCtor() {
  _cached_size_ = 0;
  utargetid_ = 0u;
  userverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargtServerID::~TargtServerID() {
  SharedDtor();
}

void TargtServerID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargtServerID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargtServerID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargtServerID_descriptor_;
}

const TargtServerID& TargtServerID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

TargtServerID* TargtServerID::default_instance_ = NULL;

TargtServerID* TargtServerID::New() const {
  return new TargtServerID;
}

void TargtServerID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utargetid_ = 0u;
    userverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargtServerID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uTargetID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utargetid_)));
          set_has_utargetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uServerID;
        break;
      }

      // required uint32 uServerID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userverid_)));
          set_has_userverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargtServerID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->utargetid(), output);
  }

  // required uint32 uServerID = 2 [default = 0];
  if (has_userverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargtServerID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uTargetID = 1 [default = 0];
  if (has_utargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->utargetid(), target);
  }

  // required uint32 uServerID = 2 [default = 0];
  if (has_userverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargtServerID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uTargetID = 1 [default = 0];
    if (has_utargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utargetid());
    }

    // required uint32 uServerID = 2 [default = 0];
    if (has_userverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargtServerID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargtServerID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargtServerID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargtServerID::MergeFrom(const TargtServerID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utargetid()) {
      set_utargetid(from.utargetid());
    }
    if (from.has_userverid()) {
      set_userverid(from.userverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargtServerID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargtServerID::CopyFrom(const TargtServerID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargtServerID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TargtServerID::Swap(TargtServerID* other) {
  if (other != this) {
    std::swap(utargetid_, other->utargetid_);
    std::swap(userverid_, other->userverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargtServerID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargtServerID_descriptor_;
  metadata.reflection = TargtServerID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargtServerIDList::kTargtServerIDsFieldNumber;
#endif  // !_MSC_VER

TargtServerIDList::TargtServerIDList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargtServerIDList::InitAsDefaultInstance() {
}

TargtServerIDList::TargtServerIDList(const TargtServerIDList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargtServerIDList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargtServerIDList::~TargtServerIDList() {
  SharedDtor();
}

void TargtServerIDList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargtServerIDList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargtServerIDList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargtServerIDList_descriptor_;
}

const TargtServerIDList& TargtServerIDList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

TargtServerIDList* TargtServerIDList::default_instance_ = NULL;

TargtServerIDList* TargtServerIDList::New() const {
  return new TargtServerIDList;
}

void TargtServerIDList::Clear() {
  targtserverids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargtServerIDList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tms.TargtServerID TargtServerIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TargtServerIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targtserverids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_TargtServerIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargtServerIDList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tms.TargtServerID TargtServerIDs = 1;
  for (int i = 0; i < this->targtserverids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targtserverids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargtServerIDList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tms.TargtServerID TargtServerIDs = 1;
  for (int i = 0; i < this->targtserverids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targtserverids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargtServerIDList::ByteSize() const {
  int total_size = 0;

  // repeated .tms.TargtServerID TargtServerIDs = 1;
  total_size += 1 * this->targtserverids_size();
  for (int i = 0; i < this->targtserverids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targtserverids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargtServerIDList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargtServerIDList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargtServerIDList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargtServerIDList::MergeFrom(const TargtServerIDList& from) {
  GOOGLE_CHECK_NE(&from, this);
  targtserverids_.MergeFrom(from.targtserverids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargtServerIDList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargtServerIDList::CopyFrom(const TargtServerIDList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargtServerIDList::IsInitialized() const {

  for (int i = 0; i < targtserverids_size(); i++) {
    if (!this->targtserverids(i).IsInitialized()) return false;
  }
  return true;
}

void TargtServerIDList::Swap(TargtServerIDList* other) {
  if (other != this) {
    targtserverids_.Swap(&other->targtserverids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargtServerIDList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargtServerIDList_descriptor_;
  metadata.reflection = TargtServerIDList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetOnlineInfo::kUAccountIDFieldNumber;
const int TargetOnlineInfo::kUSessionIDFieldNumber;
#endif  // !_MSC_VER

TargetOnlineInfo::TargetOnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetOnlineInfo::InitAsDefaultInstance() {
}

TargetOnlineInfo::TargetOnlineInfo(const TargetOnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetOnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  uaccountid_ = 0u;
  usessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetOnlineInfo::~TargetOnlineInfo() {
  SharedDtor();
}

void TargetOnlineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetOnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetOnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetOnlineInfo_descriptor_;
}

const TargetOnlineInfo& TargetOnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tms_2eproto();
  return *default_instance_;
}

TargetOnlineInfo* TargetOnlineInfo::default_instance_ = NULL;

TargetOnlineInfo* TargetOnlineInfo::New() const {
  return new TargetOnlineInfo;
}

void TargetOnlineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uaccountid_ = 0u;
    usessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetOnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uAccountID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uaccountid_)));
          set_has_uaccountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uSessionID;
        break;
      }

      // required uint32 uSessionID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uSessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usessionid_)));
          set_has_usessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetOnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uaccountid(), output);
  }

  // required uint32 uSessionID = 2 [default = 0];
  if (has_usessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetOnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uAccountID = 1 [default = 0];
  if (has_uaccountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uaccountid(), target);
  }

  // required uint32 uSessionID = 2 [default = 0];
  if (has_usessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetOnlineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uAccountID = 1 [default = 0];
    if (has_uaccountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uaccountid());
    }

    // required uint32 uSessionID = 2 [default = 0];
    if (has_usessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetOnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetOnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetOnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetOnlineInfo::MergeFrom(const TargetOnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uaccountid()) {
      set_uaccountid(from.uaccountid());
    }
    if (from.has_usessionid()) {
      set_usessionid(from.usessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetOnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetOnlineInfo::CopyFrom(const TargetOnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetOnlineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TargetOnlineInfo::Swap(TargetOnlineInfo* other) {
  if (other != this) {
    std::swap(uaccountid_, other->uaccountid_);
    std::swap(usessionid_, other->usessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetOnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetOnlineInfo_descriptor_;
  metadata.reflection = TargetOnlineInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tms

// @@protoc_insertion_point(global_scope)
